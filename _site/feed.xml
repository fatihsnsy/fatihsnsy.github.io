<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="tr-TR"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://fatihsensoy.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fatihsensoy.com/" rel="alternate" type="text/html" hreflang="tr-TR" /><updated>2021-02-25T16:40:16+00:00</updated><id>https://fatihsensoy.com/feed.xml</id><title type="html">Fatih Şensoy</title><subtitle>Bilişim-teknoloji ve siber güvenlik konuları üzerine teknik makaleler ve içerikler üreten bir siber blog...</subtitle><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><entry><title type="html">DGA - Domain Turtle For Malwares</title><link href="https://fatihsensoy.com/DGA_Domain_Turtle/" rel="alternate" type="text/html" title="DGA - Domain Turtle For Malwares" /><published>2021-02-24T23:55:00+00:00</published><updated>2021-02-24T23:55:00+00:00</updated><id>https://fatihsensoy.com/DGA_Domain_Turtle</id><content type="html" xml:base="https://fatihsensoy.com/DGA_Domain_Turtle/">&lt;p&gt;Domain generation algorithm is a most popular techniques last times by used common malwares. This technique was used by Conficker, Murofet, BankPatch and more malwares. I will explain you how domain generation algorithm work from technical perspective in this blog post.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-domain-generation-algorithm-dga&quot;&gt;What is the Domain Generation Algorithm (DGA)&lt;/h2&gt;

&lt;p&gt;Domain generation algorithm is liberation way for the malware authors. Before to DGA, malware required connect to command and control server for receive and send own commands. But there was one problem, command and control server of the malware is a was one. If security researcher or malware protection product catch this domain of the command and control server, would immediately block it. And malicious operation ended for malware and malware author. Because he/she will lost connection to malware and never send any command. This problem is cause point of the DGA emerge.&lt;/p&gt;

&lt;h2 id=&quot;purposes-of-use&quot;&gt;Purposes of Use&lt;/h2&gt;

&lt;p&gt;Malicious actor, not want provide only communicate between server (C&amp;amp;C) and client (malware). He/She wants to use it another few way in addition.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confusing the perception of network based protector by genereate many DNS request.&lt;/li&gt;
  &lt;li&gt;Hiding their activities.&lt;/li&gt;
  &lt;li&gt;Increasing malware lifetime through dynamically worked Command Control mechanism.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-underlying-fundemantal-logic-of-the-dga&quot;&gt;What is underlying fundemantal logic of the DGA?&lt;/h2&gt;

&lt;p&gt;I describe in the previous section why malware authors needed improve communication skills of the malware. Now, I explain you how it work DGA.&lt;/p&gt;

&lt;p&gt;DGA is a cryptographic algorithm unified string crafter. Mainly, it’s need to one thing, meeting date. The meeting date means, communication point of the C&amp;amp;C server with malware.&lt;/p&gt;

&lt;p&gt;Usually meeting date consist of three or six component. The three component is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Year&lt;/li&gt;
  &lt;li&gt;Month&lt;/li&gt;
  &lt;li&gt;Day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And three of the six components is same with above, but in addition:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hour&lt;/li&gt;
  &lt;li&gt;Minute&lt;/li&gt;
  &lt;li&gt;Second&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The malware author if want per day one connection attempt, will choose the first three component techniques. But security products very strong nowadays, hence resulted domain of this technique, will be very quickly blocked. We can easily see which one is more reliable by looking at the result. Of course, has six components model more reliable, at the same time very harder for security product. The attacker be able to generate &lt;strong&gt;millions of domain&lt;/strong&gt; in just a day with six component model like a turtle which transport own house. Therefore; security products, security researchers or security companies can’t block all of them. Now that we’re talking about meeting point models, we can talk about attacker how generate domains and what is the type of domains.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-create-domain-generate-types&quot;&gt;What is the create domain generate types?&lt;/h2&gt;

&lt;p&gt;Domain generation algorithm have a few types. I will mention pseudorandom algorithm and dictionary based algorithm types. You may will find other few algorithm in the web.&lt;/p&gt;

&lt;h3 id=&quot;pseudorandom-algorithm&quot;&gt;Pseudorandom Algorithm&lt;/h3&gt;

&lt;p&gt;The main logic behind the pseudorandom algorithm, generate domains randomly selected by characters in alphabet. Here is a example domain of character based random algorithm: &lt;strong&gt;vkfjsnfkclsmoj[.]com&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;lets-implement-pseudo-random-algorithm&quot;&gt;Let’s Implement Pseudo-Random Algorithm&lt;/h4&gt;
&lt;p&gt;Pseudo-random is a cryptographic algorithm which also implement in DGA. Main concept is based on bit shifting and goal of randomness. However, we’re not saying that actually provides truly randomness because algorithm needs to initializer value, and this value generally time of system.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/fatihsnsy/5c3b591250c820aef5d2dbba958b584a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I customize known pseudorandom algorithm little bit. My goal is to time-sensitive domain generation. When I say time, I am talking about the hour, minute and second. Thus, I added this values to day, month and year values. However, my math is not good for real randomness so, I targeted randomness time based sensitive and I think success it but I don’t allegate ensure to the pseudorandom algorithm conditions. Decision is yours.&lt;/p&gt;

&lt;p&gt;In my example, I determine the meeting point as &lt;strong&gt;25/02/2021 17:54:23&lt;/strong&gt; and set domain length 15 characters. And result is: &lt;strong&gt;syqbyrgonyhdyqn[.]org&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;dictionary-based-dg-algorithm&quot;&gt;Dictionary Based DG Algorithm&lt;/h3&gt;

&lt;p&gt;In this case, we have the string array defined earlier. The main purpose of this technique is to make it difficult for AI or ML based security products to detect DGA by creating different domains other than those created with random characters. Domains generated with dictionary based algorithm will appear legal and the security products and security engineer observing network inspect tools will not be suspicious. Because this domains looks like this: catinthefridgefloor[.]xyz or worldcarsrealdonut[.]com.&lt;/p&gt;

&lt;h4 id=&quot;lets-implement-dictionary-based-dg-algorithm&quot;&gt;Let’s Implement Dictionary Based DG Algorithm&lt;/h4&gt;

&lt;p&gt;Firstly, should I say this technique mixed with pseudo-random algorithm. We have need randomly created integer number as use dictionary array index. So we supply random index number with pseudo-random algorithm. In other hand, we need to determine how many string combined as domain.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/fatihsnsy/8074b79538ca7dbac5479dbdc4934858.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If we talk about this example, I determine the meeting point as &lt;strong&gt;25/02/2021 11:07:34 **and set domain length is 4 string. Result is: **timeatgameworld[.]io&lt;/strong&gt;
Dictionary based algorithm have sometimes collisions in this instance. Because our dictionary is very limited. If you would test this algorithm with large dictionary, you’re probably will getting better result then me.&lt;/p&gt;

&lt;p&gt;Today, we talked about how DGA’s work and what is this types from technical perspective. I’m waiting your thoughts in comment section. I wish you healthy lifes :)&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;[1] https://en.wikipedia.org/wiki/Domain_generation_algorithm&lt;/p&gt;

&lt;p&gt;[2] https://zvelo.com/domain-generation-algorithms-dgas/&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="domain generation algorithm" /><category term="dga" /><category term="malware dga" /><category term="dga implementation" /><category term="what is the dga" /><category term="pseudrandom generation algorithm" /><category term="pseudorandom dga" /><category term="dictionary based dga" /><summary type="html">Domain generation algorithm is a most popular techniques last times by used common malwares. This technique was used by Conficker, Murofet, BankPatch and more malwares. I will explain you how domain generation algorithm work from technical perspective in this blog post.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/dga_domain_turtle/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/dga_domain_turtle/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PEB Traversal Tekniği</title><link href="https://fatihsensoy.com/peb-traversal-teknigi/" rel="alternate" type="text/html" title="PEB Traversal Tekniği" /><published>2020-11-24T23:20:00+00:00</published><updated>2020-11-24T23:20:00+00:00</updated><id>https://fatihsensoy.com/peb-traversal-teknigi</id><content type="html" xml:base="https://fatihsensoy.com/peb-traversal-teknigi/">&lt;p&gt;Tehdit aktörleri ve zararlı yazılım analistleri arasında mücadele ortaya çıkan yeni teknikler, araçlar ve bilgi birikimleri sayesinde her geçen gün daha da kritik bir hal alıyor. Tehdit aktörleri analistler ve güvenlik ürünlerinden kaçınmak için farklı teknikler ortaya koyuyorlar. Bu teknik makalemizde sizlere gün geçtikçe popülerleşen bir teknik olan PEB Traversal (PEB Geçişi) tekniğinin ayrıtnılarını ve küçük bir örnek ile de implementasyonunu (gerçeklemesini) göstereceğim.&lt;/p&gt;

&lt;h2 id=&quot;peb-nedir&quot;&gt;PEB Nedir?&lt;/h2&gt;

&lt;p&gt;Process Environment Block(Süreç Çevre Bloğu) açılımı olan PEB, Windows işletim sisteminde bulunan bir veri yapısıdır. Bu veri yapısında;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;global bağlamlar,&lt;/li&gt;
  &lt;li&gt;programın başlangıç parametreleri,&lt;/li&gt;
  &lt;li&gt;programın imaj base adresi,&lt;/li&gt;
  &lt;li&gt;karşılıklı dışlama sağlamak için kullanılan senkronizasyon öğeleri,&lt;/li&gt;
  &lt;li&gt;programın bellek alanında yüklü olan modüllerin yapısı&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gibi öğeler barınmaktadır. PEB yapısı aşağıda görülmektedir:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_PEB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;                          &lt;span class=&quot;n&quot;&gt;Reserved1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;                          &lt;span class=&quot;n&quot;&gt;BeingDebugged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;                          &lt;span class=&quot;n&quot;&gt;Reserved2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PPEB_LDR_DATA&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;Ldr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PRTL_USER_PROCESS_PARAMETERS&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ProcessParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;AtlThunkSListPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;AtlThunkSListPtr32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;                          &lt;span class=&quot;n&quot;&gt;Reserved10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PPS_POST_PROCESS_INIT_ROUTINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostProcessInitRoutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;                          &lt;span class=&quot;n&quot;&gt;Reserved11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;Reserved12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;SessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PEB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PPEB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PEB, user-modda çalışan, processler için olmazsa olmazlardandır. Böyle kritik bir yapının user-modda çalışmasının nedeni, image loader ve heap manager gibi kernel mod dışında çalışan, NTDLL gibi işletim sistemi kütüphanelerinin içerisinde bulunan diğer user-mod API’ları tarafından kullanılmak üzere tasarlanmasıdır.&lt;/p&gt;

&lt;h2 id=&quot;tehdit-aktörleri-pebi-nasıl-kullanıyor&quot;&gt;Tehdit Aktörleri PEB’i Nasıl Kullanıyor?&lt;/h2&gt;

&lt;p&gt;PEB’in içerisinde, processin bellek alanında var olan modüllere erişilen bir yapının olduğundan bahsetmiştik. PEB_LDR_DATA adındaki bu yapı aşağıdaki gibi özetlenebilir:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_PEB_LDR_DATA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;Reserved1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;Reserved2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PEB_LDR_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PPEB_LDR_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tehdit aktörleri, Anti-virüs sistemlerinden kaçınmak amacı ile bir API Resolving tekniği olan PEB Traversal tekniğini sık sık kullanmaktadırlar. PEB Traversal tekniğini tam olarak implemente edebilmek için iki şeye ihtiyaç vardır. İlk olarak PEB yapısı içerisinde bulunan, process için load edilmiş olan modüller hakkında bilgiler tutan PEB_LDR_DATA yapısına erişip tüm modülleri ve modüllerin export ettiği tüm fonksiyonları (API’ları) gezip (Traversal) hash karşılaştırması yapan bir fonksiyon, ve akabinde de işin temeli olan bir hash fonksiyonuna ihtiyacımız bulunmaktadır. Şimdi bu parçaları birleştirerek PEB Traversal tekniğinin tekniğinin sözde bir algoritmasını sıralayım.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Traversal işlemini yapan fonksiyonumuz her export edilen API’ın hardcoded şeklindeki adını hash fonksiyonuna gönderir.&lt;/li&gt;
  &lt;li&gt;Hash fonksiyonu kendi yapısal algoritmasına göre bir hash değeri hesaplar ve bu değeri return eder.&lt;/li&gt;
  &lt;li&gt;Return edilen değer, zararlı yazılım içerisinde hardcoded hashler ile karşılaştırılır. Bu hardcoded hash değerleri, tehdit aktörleri tarafından kullanılmak istenen Windows API’larının daha önce alınmış değerleridir.&lt;/li&gt;
  &lt;li&gt;Eğer runtime anında Traversal yaparak alınan hash değerleri ile daha önce tehdit aktörü tarafından hesaplanıp hardcoded şekilde yerleştirilmiş hash değerleri eşleşiyor ise başka bir değişken, eşleşen API’ın bellek üzerindeki adresini tutar. Yani buraya kadar olan kısımda klasik LoadLibrary ve GetProcAddress API’larının yapacağı işi, AV tespitine yakalanmadan gerçekleştirmiş olur.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;i̇mplementasyonunu-yapalım&quot;&gt;İmplementasyonunu Yapalım!&lt;/h2&gt;

&lt;p&gt;Yukarıda sözde algoritmamızı zaten anlatmıştık. Şimdi ise sıra bu algoritmayı gerçek koda dökmeye geldi. Aşağıdaki kod bloğu herşeyi yeterince açıklamakta. Ek olarak yukarıda bahsetmiş olduğum “bir hash algoritması seçmemiz veya üretmemiz gerekli” kısmına tekrar değinecek olursak, ben örneğimde DJB2 hash algoritmasını seçtiğimi de belirteyim.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;winternl.h&amp;gt; // PEB yapısı bu kitaplıkta tanımlı.
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Redefine your own CreateFile func. Because we will point to the HMODULE structure returning from the PEB Traversal technique.  &lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HANDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MY_CREATE_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;lpFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;dwDesiredAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;dwShareMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LPSECURITY_ATTRIBUTES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpSecurityAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;dwCreationDisposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;dwFlagsAndAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;hTemplateFile&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Redefine PEB structures. The structure definitions in winternl.h are incomplete.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_MY_PEB_LDR_DATA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Initialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SsHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLoadOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InInitializationOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MY_PEB_LDR_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PMY_PEB_LDR_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_MY_LDR_DATA_TABLE_ENTRY&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLoadOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InInitializationOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DllBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FullDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MY_LDR_DATA_TABLE_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PMY_LDR_DATA_TABLE_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;



&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc_djb2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_api_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwModuleFunctionHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PPEB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PMY_PEB_LDR_DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PLIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pNextModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PMY_LDR_DATA_TABLE_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIMAGE_NT_HEADERS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pNTHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwExportDirRVA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIMAGE_EXPORT_DIRECTORY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pExportDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwNumFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;USHORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usOrdinalTableIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PDWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdwFunctionNameBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pFunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwFunctionHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTempChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef _WIN64
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;peb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PPEB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__readgsqword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#else 
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;peb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PPEB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__readfsdword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pLdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PMY_PEB_LDR_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ldr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pNextModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLdr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLoadOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PMY_LDR_DATA_TABLE_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pNextModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DllBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DllBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BaseDllName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pNTHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIMAGE_NT_HEADERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIMAGE_DOS_HEADER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e_lfanew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dwExportDirRVA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pNTHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptionalHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VirtualAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PMY_LDR_DATA_TABLE_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pDataTableEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLoadOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwExportDirRVA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;pExportDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIMAGE_EXPORT_DIRECTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwExportDirRVA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;dwNumFunctions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pExportDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberOfNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pdwFunctionNameBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pExportDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddressOfNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwNumFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dwFunctionHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pFunctionName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdwFunctionNameBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pdwFunctionNameBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;dwFunctionHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc_djb2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pFunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwFunctionHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwModuleFunctionHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;usOrdinalTableIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUSHORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pExportDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddressOfNameOrdinals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pModuleBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pExportDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddressOfFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usOrdinalTableIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MY_CREATE_FILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewCreateFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//3952526842 -&amp;gt; CreateFileA&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NewCreateFile&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MY_CREATE_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_api_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3952526842&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NewCreateFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Referans aldığım kod örneğini, bu tekniği yeni okuyacak olanlar için basitleştirdim. Örneğimizde kernel32.dll modülündeki CreateFileA API’sini, direk kullanım yapmadan PEB Traversal tekniği ile basitçe çağırdık. Vee sonuç:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/peb_traversal_teknigi/img/sonuc.png&quot; alt=&quot;CreateFile Sonuç&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anlamadığınız bir nokta olursa yorumları debug ediyor olacağım. Sağlıklı günler dilerim…&lt;/p&gt;

&lt;h2 id=&quot;kaynakça&quot;&gt;Kaynakça&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://theartincode.stanis.me/008-djb2/&lt;/li&gt;
  &lt;li&gt;https://malware.news/t/lets-learn-deep-dive-into-magniber-ransomware-peb-traversal-function&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb&lt;/li&gt;
  &lt;li&gt;https://raw.githubusercontent.com/mattifestation/PIC_Bindshell/master/PIC_Bindshell/GetProcAddressWithHash.h&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="peb traversal" /><category term="traversal techniques" /><category term="process environment block traversal" /><category term="dynamic api loading" /><category term="dll loading" /><summary type="html">Tehdit aktörleri ve zararlı yazılım analistleri arasında mücadele ortaya çıkan yeni teknikler, araçlar ve bilgi birikimleri sayesinde her geçen gün daha da kritik bir hal alıyor. Tehdit aktörleri analistler ve güvenlik ürünlerinden kaçınmak için farklı teknikler ortaya koyuyorlar. Bu teknik makalemizde sizlere gün geçtikçe popülerleşen bir teknik olan PEB Traversal (PEB Geçişi) tekniğinin ayrıtnılarını ve küçük bir örnek ile de implementasyonunu (gerçeklemesini) göstereceğim.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/peb_traversal_teknigi/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/peb_traversal_teknigi/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">DLInjector – Hızlı DLL Enjeksiyon Aracı</title><link href="https://fatihsensoy.com/dlinjector-hizli-dll-enjeksiyonu/" rel="alternate" type="text/html" title="DLInjector – Hızlı DLL Enjeksiyon Aracı" /><published>2020-10-30T09:00:00+00:00</published><updated>2020-10-30T09:00:00+00:00</updated><id>https://fatihsensoy.com/dlinjector-hizli-dll-enjeksiyonu</id><content type="html" xml:base="https://fatihsensoy.com/dlinjector-hizli-dll-enjeksiyonu/">&lt;p&gt;Zararlı yazılımları analiz ederken farklı farklı “&lt;strong&gt;Proces Injection&lt;/strong&gt;” tekniklerine denk geliyorum. Bunlardan en bariz olanı şüphesiz DLL enjeksiyonu olmakta. Tabi enjeksiyon yöntemlerini sadece zararlı uygulamalar kullanıyor diye de ötekileştirmemek lazım. Anti-virüs, EDR gibi güvenlik çözümlerinin yanı sıra birçok uygulama da Process enjeksiyon yöntemlerini kullanabilmektedir.&lt;/p&gt;

&lt;p&gt;Aklıma gelen projeleri gerçekleştirirken ve hedef process üzerinde daha rahat hareket edebilmek adına ben de Process enjeksiyon tekniklerinden olan DLL enjeksiyon yöntemini sık sık kullanıyordum. Fakat yaptığım her projede DLL enjeksiyon modülü ayrı ayrı, tekrar tekrar yazıyordum. Sonra bu döngüye girdiğimi farkedince de işleri kolaylaştıracak, pratik ve hızlı DLL Enjektörü yazmaya karar verdim. Ve ortaya DLInjector çıkıverdi.&lt;/p&gt;

&lt;p&gt;DLInjector, &lt;strong&gt;klasik DLL enjeksiyonu&lt;/strong&gt; veya &lt;strong&gt;CreateRemoteThread&lt;/strong&gt;  DLL enjeksiyonu olarak adlandırılan tekniği kullanarak basit bir şekilde DLL enjeksiyonu yapıyor. Normalde hedef remote process’in handle’ı gerekiyor ve gerekli handle’ı farklı yöntemlerle alabiliyoruz. Amacım kolaylık olduğundan dolayı DLInjector hedef process isminden handle’ı alıyor. Ve eğer process henüz sistem üzerinde yok ise açılana kadar hedef DLL’i enjekte etmek için bekliyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/dlinjector-hizli-dll-enjeksiyonu/img/dlinjector-cli.png&quot; alt=&quot;DLInjector CLI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DLInjector’un CLI ve GUI olmak üzere 2 farklı versiyonu bulunmakta. GUI versiyonunu normalde kodlamayacaktım fakat bazı insanlara göre grafiksel bir arayüz daha fazla kolaylık sağlıyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/dlinjector-hizli-dll-enjeksiyonu/img/dlinjector-gui.png&quot; alt=&quot;DLInjector GUI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DLInjector’un yeni versiyonları hakkında birkaç fikrim bulunuyor, bir sonraki Release’lerde yayına almayı düşünüyorum. Eğer sizin de aklınızda farklı, inovatif bir fikir var ise Pull Request’lerinizi bekliyorum dostlar 🙂&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DLInjector CLI:&lt;/strong&gt; &lt;a href=&quot;https://github.com/fatihsnsy/DLInjector-CLI&quot;&gt;https://github.com/fatihsnsy/DLInjector-CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DLInjector GUI:&lt;/strong&gt; &lt;a href=&quot;https://github.com/fatihsnsy/DLInjector-GUI&quot;&gt;https://github.com/fatihsnsy/DLInjector-GUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="dlinjector" /><category term="dlinjector cli" /><category term="dlinjector gui" /><category term="dll enjeksiyonu" /><category term="dll injection" /><category term="dll injection tools" /><category term="process injection tool" /><summary type="html">Zararlı yazılımları analiz ederken farklı farklı “Proces Injection” tekniklerine denk geliyorum. Bunlardan en bariz olanı şüphesiz DLL enjeksiyonu olmakta. Tabi enjeksiyon yöntemlerini sadece zararlı uygulamalar kullanıyor diye de ötekileştirmemek lazım. Anti-virüs, EDR gibi güvenlik çözümlerinin yanı sıra birçok uygulama da Process enjeksiyon yöntemlerini kullanabilmektedir.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/dlinjector-hizli-dll-enjeksiyonu/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/dlinjector-hizli-dll-enjeksiyonu/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TLS Callback ile Eski Bir Anti-Debug Tekniği</title><link href="https://fatihsensoy.com/tls-callback-eski-antidebug/" rel="alternate" type="text/html" title="TLS Callback ile Eski Bir Anti-Debug Tekniği" /><published>2020-08-26T09:00:00+00:00</published><updated>2020-08-26T09:00:00+00:00</updated><id>https://fatihsensoy.com/tls-callback-eski-antidebug</id><content type="html" xml:base="https://fatihsensoy.com/tls-callback-eski-antidebug/">&lt;p&gt;Zararlı uygulamalar her ne kadar ofans odaklı olsalar da, ofansif davranışlarını daha uzun ve etkili bir şekilde sürdürmek için defansif yeteneklerini de sıklıkla ortaya koymaktadırlar. Bir kedi-fare oyunu olan bu alanda, zararlı aktörlerin  en büyük hedeflerinden birisi de yazdıkları zararlıların analiz edilmesini olabildiğince engellemeye çalışmaktır. Sizlerle birlikte adını sık sık duyduğumuz, demode olan fakat kedi-fare oyunun başlangıcı sayılabilecek bir tekniği inceleyecek ve gerçeklemesini yapacağız.&lt;/p&gt;

&lt;p&gt;Fakat tekniğin detayları ve gerçeklemesine geçmeden önce TLS’in ne olduğunu bilmemiz, bize büyük avantaj kazandıracaktır.&lt;/p&gt;

&lt;h2 id=&quot;tls-nedir&quot;&gt;TLS Nedir?&lt;/h2&gt;

&lt;p&gt;Açılımı &lt;strong&gt;Thread Local Storage&lt;/strong&gt; olan TLS, processin iş parçacıklarının (&lt;strong&gt;thread&lt;/strong&gt;) kendilerine özgü verileri bellekte depolayabildiği bir yöntemdir. Çalışma zamanında (&lt;strong&gt;runtime&lt;/strong&gt;) iş parçacığına özgün olan veriler TlsAlloc, TlsGetvValue, TlsSetValue gibi Windows API’leri ile desteklenebilmektedir. Ayrıca bilindiği üzere bir processin tüm iş parçacıkları aynı sanal alanı paylaşmaktadır. Bir fonksiyon içerisindeki lokal bir değişken, onu çalıştıran iş parçacığına özgüdür. Fakat fonksiyon haricinde yer alan statik ve global değişkenler ise, processin tüm iş parçacıkları ile paylaşılmaktadır. TLS yapısında oluşturulan değişkenlerde ise durum biraz farklıdır. TLS yapısında iş parçacıklarının, değişkenler için kendilerine özgü olan kopyaları bulunmaktadır.  Yani TLS yapısında, değiştirilen bir değişkenin değeri sadece ilgili olan iş parçacığında değişime uğramaktadır. Diğer iş parçacıklarının kendilerine özgü kopyaları olduğundan dolayı bir değişim olmamaktadır.&lt;/p&gt;

&lt;p&gt;TLS yapısı ile, processin global bir index kullanmasıyla, her iş parçacığına özgü veriler sağlaması mümkündür. Aşağıdaki görsel tam olarak TLS’in nasıl çalıştığını anlatmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tls-callback-eski-antidebug-teknigi/img/cover.png&quot; alt=&quot;TLS Callback Cover&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde iki iş parçacığının TLS kullanımını görmektesiniz. TLS, gdwTlsIndex1 ve gdwTlsIndex2 adında 2 adet global veri oluşturur. TlsGetValue API’si ile iş parçacıklarının ilgili indexlerinin karşılığı olan değer lpvData değişkeninde depolanır.&lt;/p&gt;

&lt;h2 id=&quot;tls-callback-i̇le-debug-tespiti&quot;&gt;TLS Callback İle Debug Tespiti&lt;/h2&gt;

&lt;p&gt;TLS’in çalışma mantığını az da olsa makalenin konusunu anlayabilecek kadar kavradık. Şimdi ise asıl konumuza geri dönüyoruz. Eski bir gelenek olan (eski diyorum çünkü günümüzde bir çok modern debug tespit yöntemleri geliştirildi.  TLS Callback ile debug tespitinin nasıl olduğuna göz atacağız.&lt;/p&gt;

&lt;p&gt;TLS Callback yönteminin popüler olmasının en büyük sebeplerinden birisi, &lt;strong&gt;entrypoint&lt;/strong&gt; noktasına gelmeden önce çalışıyor olmasıdır. Yani zararlı aktörler, uygulamalarının ana amacı belli olmadan önce, programın başlangıcında TLS Callback yöntemi ile zararlı uygulamalarının debug edilip edilmediğini anlayabilmektedirler. Eski bir anti-debug tekniği olan TLS Callback, günümüzde kolaylıkla bypass edilebilmektedir.&lt;/p&gt;

&lt;p&gt;TLS Callback anti-debug tekniğini daha iyi anlamak adına uygulamasını yapalım.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;windows.h&amp;gt;
#pragma comment(lib, &quot;ntdll.lib&quot;)
#pragma section(&quot;.CRT$XLB&quot;, read) //.CRT$XLB adında yeni bir section oluşturduk. Section adının aynı olması gerekmektedir.
#define NtCurrentProcess() (HANDLE)-1
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTAPI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NtQueryInformationProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InfoClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReturnLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef _WIN64
#pragma comment(linker, &quot;/INCLUDE:_tls_used&quot;)
#define readpeb (PBOOLEAN)__readgsdword(0x60) + 2 //PEB yapısında BeingDebugged'a işaret ediyor. x64 için
#else
#pragma comment(linker, &quot;/INCLUDE:__tls_used&quot;)
#define readpeb (PBOOLEAN)__readfsdword(0x30) + 2 //x32 için
#endif
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DebuggerDetect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PBOOLEAN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeingDebugged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readpeb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DebugPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeingDebugged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Debugger Detected!!!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No debugger detected!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NtQueryInformationProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NtCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebugPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;//DebugPort 0 değilse programın debug edildiğinin göstergesidir.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebugPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Debugger Detected via QueryInformationProcess!!!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No debugger detected for QueryInformationProcess&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__declspec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.CRT$XLB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIMAGE_TLS_CALLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DebuggerDetect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, you're now in the entrypoint!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıdaki implementesini yaptığımız TLS Callback ile anti-debug tekniğine bir göz atalım. &lt;strong&gt;NtQueryInformationProcess&lt;/strong&gt; API’si ile de bir anti-debug tekniğini eklediğimiz örneğimizde pragma anahtar sözcükleri ile derleyicimize talimatlar vermekteyiz. Ntdll kütüphanesini dahil et, yeni bir section oluştur, linker’a belirtilenleri bağla gibi komutları zaten kodun içerisinde görmektesiniz.  Buradaki en önemli noktalardan birisi &lt;strong&gt;__declspec&lt;/strong&gt; anahtar sözcüğü ile tanım yaptığımız satırdır. Pragma anahtar sözcüğünde oluşturduğumuz section için yer ayırma yapıyoruz ve TLS Callback fonksiyonumuzun adresini veriyoruz. Daha sonra yazmış olduğumuz &lt;strong&gt;DebuggerDetect&lt;/strong&gt; fonksiyonu çalışıyor ve bu fonksiyondan sonra &lt;strong&gt;main&lt;/strong&gt;() fonksiyonumuz çalışıyor.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ntdll!_PEB
   +0x000 InheritedAddressSpace : UChar
   +0x001 ReadImageFileExecOptions : UChar
   +0x002 BeingDebugged    : UChar
   +0x003 BitField         : UChar
   +0x003 ImageUsesLargePages : Pos 0, 1 Bit
   +0x003 IsProtectedProcess : Pos 1, 1 Bit
   +0x003 IsImageDynamicallyRelocated : Pos 2, 1 Bit
   +0x003 SkipPatchingUser32Forwarders : Pos 3, 1 Bit
   +0x003 IsPackagedProcess : Pos 4, 1 Bit
   +0x003 IsAppContainer   : Pos 5, 1 Bit
   +0x003 IsProtectedProcessLight : Pos 6, 1 Bit
   +0x003 IsLongPathAwareProcess : Pos 7, 1 Bit
   +0x004 Padding0         : [4] UChar
   +0x008 Mutant           : Ptr64 Void
   +0x010 ImageBaseAddress : Ptr64 Void
   +0x018 Ldr              : Ptr64 _PEB_LDR_DATA
   +0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS
   +0x028 SubSystemData    : Ptr64 Void
   +0x030 ProcessHeap      : Ptr64 Void
   +0x038 FastPebLock      : Ptr64 _RTL_CRITICAL_SECTION
   +0x040 AtlThunkSListPtr : Ptr64 _SLIST_HEADER
   +0x048 IFEOKey          : Ptr64 Void
   +0x050 CrossProcessFlags : Uint4B
   +0x050 ProcessInJob     : Pos 0, 1 Bit
   +0x050 ProcessInitializing : Pos 1, 1 Bit
   +0x050 ProcessUsingVEH  : Pos 2, 1 Bit
   +0x050 ProcessUsingVCH  : Pos 3, 1 Bit
   +0x050 ProcessUsingFTH  : Pos 4, 1 Bit
   +0x050 ProcessPreviouslyThrottled : Pos 5, 1 Bit
   +0x050 ProcessCurrentlyThrottled : Pos 6, 1 Bit
   +0x050 ReservedBits0    : Pos 7, 25 Bits
   +0x054 Padding1         : [4] UChar
   +0x058 KernelCallbackTable : Ptr64 Void
   +0x058 UserSharedInfoPtr : Ptr64 Void
   +0x060 SystemReserved   : Uint4B
   +0x064 AtlThunkSListPtr32 : Uint4B
   +0x068 ApiSetMap        : Ptr64 Void
   +0x070 TlsExpansionCounter : Uint4B
   +0x074 Padding2         : [4] UChar
   +0x078 TlsBitmap        : Ptr64 Void
   +0x080 TlsBitmapBits    : [2] Uint4B
   +0x088 ReadOnlySharedMemoryBase : Ptr64 Void
   +0x090 SharedData       : Ptr64 Void
   +0x098 ReadOnlyStaticServerData : Ptr64 Ptr64 Void
   +0x0a0 AnsiCodePageData : Ptr64 Void
   +0x0a8 OemCodePageData  : Ptr64 Void
   +0x0b0 UnicodeCaseTableData : Ptr64 Void
   +0x0b8 NumberOfProcessors : Uint4B
   +0x0bc NtGlobalFlag     : Uint4B
   +0x0c0 CriticalSectionTimeout : _LARGE_INTEGER
   +0x0c8 HeapSegmentReserve : Uint8B
   +0x0d0 HeapSegmentCommit : Uint8B
   +0x0d8 HeapDeCommitTotalFreeThreshold : Uint8B
   +0x0e0 HeapDeCommitFreeBlockThreshold : Uint8B
   +0x0e8 NumberOfHeaps    : Uint4B
   +0x0ec MaximumNumberOfHeaps : Uint4B
   +0x0f0 ProcessHeaps     : Ptr64 Ptr64 Void
   +0x0f8 GdiSharedHandleTable : Ptr64 Void
   +0x100 ProcessStarterHelper : Ptr64 Void
   +0x108 GdiDCAttributeList : Uint4B
   +0x10c Padding3         : [4] UChar
   +0x110 LoaderLock       : Ptr64 _RTL_CRITICAL_SECTION
   +0x118 OSMajorVersion   : Uint4B
   +0x11c OSMinorVersion   : Uint4B
   +0x120 OSBuildNumber    : Uint2B
   +0x122 OSCSDVersion     : Uint2B
   +0x124 OSPlatformId     : Uint4B
   +0x128 ImageSubsystem   : Uint4B
   +0x12c ImageSubsystemMajorVersion : Uint4B
   +0x130 ImageSubsystemMinorVersion : Uint4B
   +0x134 Padding4         : [4] UChar
   +0x138 ActiveProcessAffinityMask : Uint8B
   +0x140 GdiHandleBuffer  : [60] Uint4B
   +0x230 PostProcessInitRoutine : Ptr64     void 
   +0x238 TlsExpansionBitmap : Ptr64 Void
   +0x240 TlsExpansionBitmapBits : [32] Uint4B
   +0x2c0 SessionId        : Uint4B
   +0x2c4 Padding5         : [4] UChar
   +0x2c8 AppCompatFlags   : _ULARGE_INTEGER
   +0x2d0 AppCompatFlagsUser : _ULARGE_INTEGER
   +0x2d8 pShimData        : Ptr64 Void
   +0x2e0 AppCompatInfo    : Ptr64 Void
   +0x2e8 CSDVersion       : _UNICODE_STRING
   +0x2f8 ActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA
   +0x300 ProcessAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP
   +0x308 SystemDefaultActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA
   +0x310 SystemAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP
   +0x318 MinimumStackCommit : Uint8B
   +0x320 FlsCallback      : Ptr64 _FLS_CALLBACK_INFO
   +0x328 FlsListHead      : _LIST_ENTRY
   +0x338 FlsBitmap        : Ptr64 Void
   +0x340 FlsBitmapBits    : [4] Uint4B
   +0x350 FlsHighIndex     : Uint4B
   +0x358 WerRegistrationData : Ptr64 Void
   +0x360 WerShipAssertPtr : Ptr64 Void
   +0x368 pUnused          : Ptr64 Void
   +0x370 pImageHeaderHash : Ptr64 Void
   +0x378 TracingFlags     : Uint4B
   +0x378 HeapTracingEnabled : Pos 0, 1 Bit
   +0x378 CritSecTracingEnabled : Pos 1, 1 Bit
   +0x378 LibLoaderTracingEnabled : Pos 2, 1 Bit
   +0x378 SpareTracingBits : Pos 3, 29 Bits
   +0x37c Padding6         : [4] UChar
   +0x380 CsrServerReadOnlySharedMemoryBase : Uint8B
   +0x388 TppWorkerpListLock : Uint8B
   +0x390 TppWorkerpList   : _LIST_ENTRY
   +0x3a0 WaitOnAddressHashTable : [128] Ptr64 Void
   +0x7a0 TelemetryCoverageHeader : Ptr64 Void
   +0x7a8 CloudFileFlags   : Uint4B
   +0x7ac CloudFileDiagFlags : Uint4B
   +0x7b0 PlaceholderCompatibilityMode : Char
   +0x7b1 PlaceholderCompatibilityModeReserved : [7] Char
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;x86 ve x64 mimari uyumlu olan implementemizde, öncelikle mimariye göre PEB yapısına erişmemiz gerekiyor. PEB yapısına eriştikten sonra yukarıdaki tabloda da görüldüğü üzere yapının 3. sıradaki değişkeni olan BeingDebugged’a erişim sağlamak adına 2. indexi belirtiyoruz.Eğer BeingDebugged 0’dan farklı bir değere sahip ise bu, programın debug edildiği anlamına gelmektedir. Ayrıca yukarıdaki kod parçasında mimariye göre PEB’in konumunun farklılık gösterdiği göz ardı edilmemelidir.&lt;/p&gt;

&lt;p&gt;PEB ile anti-debug tekniğinin ardından küçük bir ekleme daha yaparak anti-debug uygulamamızı biraz daha geliştiriyoruz. Windows API’larının sunduğu nimetlerden faydanalanarak, uygulamanını debug edilip edilmediğini anlayabilmekteyiz. Örnekte görüldüğü üzere &lt;strong&gt;NtQueryInformationProcess&lt;/strong&gt; API’si ile benzer bir anti-debug tekniği kullanmış olduk. İlgili API, az önce bahsettiğimiz gibi kendisi mimariye göre PEB’in başlangıç noktasını bulur ve bizimle neredeyse aynı işlemleri yapar. &lt;strong&gt;ProcessInformationClass&lt;/strong&gt; parametresine geçtiğimiz 7 değeri ile &lt;strong&gt;DebugPort&lt;/strong&gt; değişkenine atama yapmaktayız. Eğer DebugPort değişkeni 0’dan farklı bir değere sahip ise programın debug edildiği anlaşılmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tls-callback-eski-antidebug-teknigi/img/tls-callback-1.png&quot; alt=&quot;TLS Callback Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sizlere bu makalemde TLS’in genel olarak tanımı ve yapısı, TLS Callback ile debug tespiti ve PEB yapısına değinmiş olduk. Bir sonraki makalelerimde farklı anti-debug ve anti-reverse teknikleri ile karşınızda olacağım. Sağlıcakla kalın…&lt;/p&gt;

&lt;h2 id=&quot;kaynakça&quot;&gt;Kaynakça&lt;/h2&gt;

&lt;p&gt;[1]  https://en.wikipedia.org/wiki/Thread-local_storage&lt;/p&gt;

&lt;p&gt;[2] https://docs.microsoft.com/tr-tr/cpp/parallel/thread-local-storage-tls&lt;/p&gt;

&lt;p&gt;[3] https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage&lt;/p&gt;

&lt;p&gt;[4] http://rinseandrepeatanalysis.blogspot.com/p/peb-structure.html&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="anti-debug techniques" /><category term="thread local storage" /><category term="tls" /><category term="tls callback" /><category term="tls callback anti-debug" /><category term="tls callback code snippet" /><category term="tls callback ile anti-debug tekniği" /><category term="tls callback implementation" /><summary type="html">Zararlı uygulamalar her ne kadar ofans odaklı olsalar da, ofansif davranışlarını daha uzun ve etkili bir şekilde sürdürmek için defansif yeteneklerini de sıklıkla ortaya koymaktadırlar. Bir kedi-fare oyunu olan bu alanda, zararlı aktörlerin en büyük hedeflerinden birisi de yazdıkları zararlıların analiz edilmesini olabildiğince engellemeye çalışmaktır. Sizlerle birlikte adını sık sık duyduğumuz, demode olan fakat kedi-fare oyunun başlangıcı sayılabilecek bir tekniği inceleyecek ve gerçeklemesini yapacağız.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/tls-callback-eski-antidebug-teknigi/img/cover.png" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/tls-callback-eski-antidebug-teknigi/img/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Perdenin Ardındakiler 0x01 - Android Zararlısını Işığa Kavuşturmak</title><link href="https://fatihsensoy.com/perdenin-ardindakiler-0x01/" rel="alternate" type="text/html" title="Perdenin Ardındakiler 0x01 - Android Zararlısını Işığa Kavuşturmak" /><published>2020-05-10T19:59:00+00:00</published><updated>2020-05-10T19:59:00+00:00</updated><id>https://fatihsensoy.com/perdenin-ardindakiler-0x01</id><content type="html" xml:base="https://fatihsensoy.com/perdenin-ardindakiler-0x01/">&lt;p&gt;Selamlar dostlar…&lt;/p&gt;

&lt;p&gt;Zararlı yazılım analiz raporları her gün, her hafta ve her ay karşımıza çıkmakta. Raporların içeriğinde de sık sık “&lt;strong&gt;Teknik analizler sonucunda gizlenmiş IP adresi karşımıza çıkmakta&lt;/strong&gt;” veya  “&lt;strong&gt;Decryption işlemi sonucunda zararlı URL bulmaktayız&lt;/strong&gt;” gibi ifadeleri görüyoruz. E tamam decryption işlemi yaptın da ulaştın obfuscate edilmiş URL’e ama nasıl yaptın? Bu sorunu baz aldım ve piyasada decryption işleminin nasıl yapıldığına dair çok fazla içerik bulunmadığını gördüm. Bu eksiklikten yola çıkarak analizini yapıp deobfuscate ettiğim zararlı yazılımları, nasıl deobfuscate ettiğime dair bilgilendiri, eğitici ve ileri seviye teknik bir seri başlatıyorum. Serinin adı da “&lt;strong&gt;Perdenin Ardındakiler!&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;&lt;del&gt;(Evet isim aklıma geldikten sonra araştırma yaptım, böyle bir müzik grubu olduğunu öğrenmiş oldum, olayın müzikle pek alakası yok 🙂 )&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Perdenin Ardındakiler serisinin ilk içeriği olan 0x01’de sizlere çook uzun süre ortaya çıkmış olan Android zararlısı &lt;strong&gt;DroidDream&lt;/strong&gt;’in içerisinde yer alan obfuscate edilmiş, yani plaintext olarak okuyamadığımız ve belirli bir decrypt rutininden sonra dinamik olarak ortaya çıkan komuta kontrol sunucusunun statik olarak nasıl deobfuscate edilip bizlere ışıklar içinde görüneceğini anlatacağım. Serinin ilk içeriği olması sebebiyle biraz basitten başlayıp işin mantığını kavramaya çalışacağız.&lt;/p&gt;

&lt;h3 id=&quot;giriş&quot;&gt;Giriş&lt;/h3&gt;
&lt;p&gt;DroidDream zararlısı içerisinde birkaç farklı yapı barındırmakta. Android’in bir zafiyetini kullanarak sistemi exploit etmekte ve uzaktan ilgili binary’ye bağlantı sağlandığında ise bağlanan saldırgana ROOT yetkisi vermektedir. Bu seride zararlılara çok fazla değinmeden ön izlenim geçeceğim çünkü konumuz Malware Analiz Raporu değil, o malware içerisindeki gizlenmiş indikatörleri ortaya çıkarmak.&lt;/p&gt;

&lt;p&gt;Öncelikle bir dex decompiler’a ihtiyacımız var. Bu da Desktop Zararlı Analizleri sırasındaki IDA’nın yerini alacak olan &lt;strong&gt;Jadx&lt;/strong&gt;’ten başka bir tool olamaz tabi! Aslında IDA ile de decompile edebilirdik sonuçta dalvik bytecodelarını da decompile edebiliyor ama Android zararlıları için pek de amaca uygun değil.&lt;/p&gt;

&lt;p&gt;Şimdi ne yapacağız? Jadx ile direk APK dosyamızı açacağız. Tebrikler, kısmen doğru cevap verdiniz. Tam doğru olanı ise Jadx’i komut satırı üzerinden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--show-bad-code&lt;/code&gt; parametresi ile başlatmak. Sebebi ise Jadx’in decompile işlemi yaparken bazı metodları tam olarak ayırştırıp Java kodu olarak sunamamasından dolayı bu parametre ile başlatıyoruz ve diyoruz ki “&lt;strong&gt;Sen decompile edebildiğin kadarını göster bize&lt;/strong&gt;”. Ve karşımıza yine de güzel bir Java metodu çıkmış oluyor. Bu işlemi yapmaz isek karşılaşacağımı tablo aşağıdaki gibi olmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/perdenin-ardindakiler-0x01/img/pa01-1.png&quot; alt=&quot;pa01-1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;decrypt-rutinin-tespiti&quot;&gt;Decrypt Rutinin Tespiti&lt;/h3&gt;

&lt;p&gt;Giriş kısmında zararlı APK’mızı show-bad-code modunda JADX’te decompile etmiştik. Şimdi ise neyi deobfuscate edeceğimizi bulmamız gerekiyor. Bunun için en iyi yol uygulamanın çalışma hiyerarşisine göre trace etmek. Yani main sınıfından başlayıp “ne nereye gidiyor, hangi parametreleri yolluyor?” sorusunu kendinize sorup çözüm aramaya çalışırsanız karşınızda bir anda aşağıdaki görselde olduğu gibi Xor veya matematiksel işlemlerin yoğun olduğu bir kod parçası belirecektir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/perdenin-ardindakiler-0x01/img/pa01-2.png&quot; alt=&quot;pa01-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Crypt metodunu incelediğimizde buffer adında byte tipinde bir diziyi parametre olmakta almakta. Daha sonra yaptığı işlem ise buffer dizisinin boyu kadar i değişkenini bir bir artırıp dizinin i. indisindeki değer il KEYVALUE dizisinin pos indisindeki değeri xor işlemine tabi tutmak. İç içe for döngüsü kullanılabilirdi fakat saldırgan pos değerini &lt;strong&gt;pos++&lt;/strong&gt; işlemi ile artırmayı tercih etmiş. Hemen aşağısında bulunan if döngüsü bu konu için bizi alakadar etmemektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KEYVALUE&lt;/strong&gt; adındaki byte dizisi nerede diye sorarsanız saldırgan bunu her yerde tanımlamış olabilir. Ama bizim örneğimizde sınıfın en üstünde tanımlanmış durumda ve içerisinde barındırdığı değerler de ilgi çekici.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/perdenin-ardindakiler-0x01/img/pa01-3.png&quot; alt=&quot;pa01-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bir string dizisini &lt;strong&gt;getBytes&lt;/strong&gt;() metodu ile baytlara çevirmiş ve sonucunda da byte tipinde KEYVALUE adındaki diziye tanımlamış durumda.&lt;/p&gt;

&lt;h3 id=&quot;obfuscate-edilmiş-verinin-tespiti&quot;&gt;Obfuscate Edilmiş Verinin Tespiti&lt;/h3&gt;

&lt;p&gt;Decrypt rutinini tespit etmiştik. Ve içerisine bir bayt dizisi almakta idi. Yani çözeceği veri bir byte dizisinin içinde olmalı veyahut başka veri tipinde dizi olup, byte veri tipine zorlanmış olmalı. Uygulamayı yine çalıştırma hiyerarşisine göre analiz ettiğimizde karşımıza tam da aradığımız şekilde bir bayt dizisi çıkmakta.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/perdenin-ardindakiler-0x01/img/pa01-4.png&quot; alt=&quot;pa01-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bArr&lt;/strong&gt; adındaki byte dizisini bulduk ve obfuscate edilmiş veri olduğundan şüphelendik diyelim. Peki bundan sonra ne yapacağız? Cevap basit. bArr dizisini trace etmek, yani izini sürmek. Kapsamı bArr dizisi ile daralttığımız için işimiz gerçekten de kolay oluyor.&lt;/p&gt;

&lt;h3 id=&quot;trace-trace-trace&quot;&gt;Trace Trace Trace!&lt;/h3&gt;

&lt;p&gt;Saldırgan 45 boylu bArr adındaki byte veri tipindeki diziye görselden de gördüğünüz üzere atamalar yapmış bulunmakta. Atamaların sonuna geldiğimizde ise **u = bArr; **şeklinde bir referans ataması olduğunu görüyoruz. Java’da referans atamasının karşılığını C’de pointer geçme olarak aklınızda tutabilirsiniz. Saldırgan burada izini kaybettirmeye çalışmış. Artık trace etmemiz gereken değişken udeğişkeni oluyor. Ve biraz daha analize devam ettiğimizde ise onCreate() metodunun üst kısımlarında aradığımızı görebilmekteyiz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/perdenin-ardindakiler-0x01/img/pa01-5.png&quot; alt=&quot;pa01-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gördüğünüz üzere obfuscate edildiğinden şüphe ettiğimiz verilerin tutulup referansının u değişkenine atandığı dizinin bir kopyasını alıp byte veri tipinde c adında başka bir diziye atamakta. Bunun hemen altında ise decrypt rutini olan crypt metoduna c’yi parametre olarak geçmekte. Bunun sonucunda ise artık obfuscate edildiğinden şüphe duyduğumuz veri çözümlenmekte.&lt;/p&gt;

&lt;p&gt;Dikkat ederseniz şu ana kadar hep “obfuscate edildiğinden şüphe duyduğumuz veri” cümlesini kullandım. Çünkü henüz emin değiliz ve bunun gibi bir çok dizi olabilirdi. Saldırgan analistin işini zorlaştırmak için ne taklalar atıyor bir bilseniz!&lt;/p&gt;

&lt;h3 id=&quot;emin-olma-ve-c-zamanı&quot;&gt;Emin Olma Ve C# Zamanı&lt;/h3&gt;

&lt;p&gt;Şimdiye kadar yaptığımız şey aslında tüm uygulamayı trace ettikten sonra decrypt rutini ve akabinde obfuscate edilen verinin ne yollarla decrypt rutinine yollandığının algoritmasını kafamızda çözümlemekti. Şimdi ise sıra teorilerimizi kanıtlamaya ve biraz da kod yazmaya geldi.&lt;/p&gt;

&lt;p&gt;Yapacağımız ilk şey tanımlamalar olmakta. İlk olarak Xor anahtarlarını tanımlıyoruz. Daha sonra ise obfuscate edilmiş bArr dizisini ve tüm içeriklerini tanımlıyoruz.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYVALUE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;6^)(9-p35a%3#4S!4S0)$Yt%^&amp;amp;5(j.g^&amp;amp;o(*0)$Yv!#O@6GpG@=+3j.&amp;amp;6^)(0-=1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anahtar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEYVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Stringi byte olarak alıyoruz.&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;93&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Dikkat edilmesi gereken noktalardan birisi ise saldırgan Java’daki getBytes() metodunu default biçiminde kullanmış. Yani UTF8’den baytlara çevirmiş. Bizde C#’da bunu belirterek yapıyoruz. Java’daki gibi direk bir kullanımı C#’da bulunmuyor.&lt;/p&gt;

&lt;p&gt;Decrypt adındaki metodumuzu yazmaya başlıyoruz.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dizi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anahtar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dizi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dizi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dizi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anahtar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlPlain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dizi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;URL: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlPlain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kod parçasında görüldüğü üzere pos değişkenini hiç hesaba katmadık. Yaptığımız tek şey dizi adındaki dizi ve anahtar dizisini de karşılık gelen i. indisteki değer ile xor işlemine tabi tutmak oldu.  Dizinin içerisinde bulunan değer bayt türünde olduğundan dolayı baytları UTF8 biçimindeki stringlere, C#’ın GetString() metodu sayesinde dönüştürüp, ekrana çıktılama yaptık ve karşımıza gelen sonuç, yüz güldüren cinstendi 🙂&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/perdenin-ardindakiler-0x01/img/pa01-6.png&quot; alt=&quot;pa01-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kodun tam halini buradan görebilirsiniz. Github Gist üzerinden de indirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Perdenin Ardındakiler serisinin 0x01 bölümünde sizlere Android zararlısı Droid Dream’e decryption kodu yazarak tün indikatörleri ışığa kavuşturmayı anlatttım. Herhangi bir sorunuz, öneriniz olursa yorumlardan bana bildirebilirsiniz. Bu arada pratik yapmak için de DroidDream zararlısının hashini buraya bırakıyorum. “Hep sayfanın en üstüne koyarlar sen neden en alta hash koyuyorsun” diye merak ettiyseniz de konuyu tam olarak dinleyip, daha sonra pratik yapmanızın daha doğru olduğunu düşünüyorum şeklinde bir cevap verebilirim 🙂&lt;/p&gt;

&lt;p&gt;Serinin bir sonraki bölümünde görüşmek üzere, sağlıcakla kalın…&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DroidDream MD5 HASH: ecad34c72d2388aafec0a1352bff2dd9 &lt;/code&gt;&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="android malware" /><category term="android malware analysis" /><category term="android malware deobfuscation" /><category term="droiddream" /><category term="droidream malware analysis" /><category term="malware deobfuscation" /><summary type="html">Selamlar dostlar…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/perdenin-ardindakiler-0x01/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/perdenin-ardindakiler-0x01/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">💉 Process Injection Teknikleri Ve Detayları</title><link href="https://fatihsensoy.com/Process-Injection-Teknikleri/" rel="alternate" type="text/html" title="💉 Process Injection Teknikleri Ve Detayları" /><published>2020-04-30T19:36:00+00:00</published><updated>2020-04-30T19:36:00+00:00</updated><id>https://fatihsensoy.com/Process-Injection-Teknikleri</id><content type="html" xml:base="https://fatihsensoy.com/Process-Injection-Teknikleri/">&lt;p&gt;Hiç legal bir sistem uygulamasının sistem kaynaklarını gereğinden fazla tüketme ve olağan dışı ağ hareketleri gibi alışılmadık davranışlarda bulunduğunu farkettiniz mi? Forumlarda sık sık karşımıza çıkan “svchost.exe virüs müdür?” gibi sorulara işin farklı bir yüzünden en teknik detayları ile cevap veriyorum. Bir eğitim niteliğinde olan bu makalemizde sizlere Process Injection Tekniklerini olabildiğince detaylı ve açıklayıcı şekilde anlattım.&lt;/p&gt;

&lt;h2 id=&quot;process-injection-nedir&quot;&gt;Process Injection Nedir?&lt;/h2&gt;

&lt;p&gt;Process Injection (Code Injection diye de nitelendirilir) işleminde temel amaç, zararlı bir uygulamanın veya kodun, legal bir process’in belleğine enjekte edilmesidir. Legal process’in belleğine enjekte edilecek olan nesne, bazen bir executable, bazen bir DLL, bazen de Shellcode olabilir. Enjekte işlemi tamamlandıktan sonra ise legal process bu enjekteyi çalıştırmaya zorlanır. Process Injection saldırgana bir çok avantaj sağlamakla beraber, enjeksiyon yapan saldırgan şu işlemleri yapabilir:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Legal process’i dosya indirme, yükleme ve keyboard hareketlerini almaya zorlamak gibi işlemler yapabilir.&lt;/li&gt;
  &lt;li&gt;API çağrılarını yönlendirebilir, API’lerin parametrelerini ele geçirebilir ve API’lerin export’larını filtreleyebilir.&lt;/li&gt;
  &lt;li&gt;Legal process’e enjekte işlemi yaptığı için bazı güvenlik ürünlerini dolaylı yoldan baypass’layabilir.&lt;/li&gt;
  &lt;li&gt;Ve çok daha fazlasını yapabilir.
Evet, genellikle saldırganlar (malware geliştiricileri) bu teknikten sık sık faydalanır. Peki sadece saldırganlar mı yararlanır? Tabiki de hayır. Bir çok güvenlik ürünü sistem üzerinde korumayı tam olarak gerçekleştirebilmek adına enjeksiyon tekniklerini kullanmaktadır. Bunu da bir not olarak düşmekte fayda var.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Genel bir örnek ile açıklayacak olursak, enjekte edilecek nesne (exe, DLL,Shellcode vs.) var olan bir process’e veya kendi tarafından başlatılan bir process’e enjekte olabilmesi için öncelikle enjekte olacağı process’i tanımlaması gerekir. Bunun için &lt;strong&gt;enumerate&lt;/strong&gt; işlemi yapılabilir. Enumerate işlemi için birkaç Windows API’si bulunmaktadır. Bunlar;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CreateTool32HelpSnapshot()&lt;/li&gt;
  &lt;li&gt;Process32First()&lt;/li&gt;
  &lt;li&gt;Process32Next()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CreateToolhelp32Snapshot()&lt;/strong&gt; API’si, o an sistemde çalışan tüm process’lerin bir snapshot’ını alır. Daha sonra &lt;strong&gt;Process32First()&lt;/strong&gt; API’si snapshot’ı alınan tüm process’ler arasından ilki hakkında bilgiler alır. &lt;strong&gt;Process32Next()&lt;/strong&gt; ile de snapshot’ı alınan diğer tüm process’ler arasında tek tek gezme işlemi yapar ve hepsi hakkında bilgi toplar. Process32First() ve Process32Next() fonksiyonları sayesinde enumerate edilen process’ler hakkında alınabilen bilgilerden bazıları şunlardır;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Executable’ın adı,&lt;/li&gt;
  &lt;li&gt;Process ID’si (PID),&lt;/li&gt;
  &lt;li&gt;Child Process’in ID’si,
Ve daha fazla bilgiye erişilebilmektedir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Process32First() ve Process32Next() API’lerinin birlikte kullanımı &lt;strong&gt;Process Walking&lt;/strong&gt; adında bir tekniği de temsil etmektedir. Process Walking, sistem snapshot’ındaki process’leri tek tek gezerek bilgi toplama işlemine verilen addır. Ayrıca &lt;strong&gt;Toolhelp32ReadProcessMemory()&lt;/strong&gt; API’si ile de belirli bir process’in belleğini okunabilir.&lt;/p&gt;

&lt;p&gt;Process Walking işlemi ile malware, enjekte edilecek process’in var olup olmadığını kontrol edebilir. Var ise enjekte olabilir, yok ise hedef process’i başlatabilir. Daha sonra ise malware nesnesi (DLL, executable, Shellcode vs.) legal process’in belleğine kendisini enjekte eder ve legal process’in enjekte olan zararlıyı çalıştırması için zorlar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-1.png&quot; alt=&quot;Process Injection Scheme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde bu işlem anlaşılır bir şekilde gösterilmiştir. Malware’ın user space’de çalıştığını da unutmayalım!&lt;/p&gt;

&lt;p&gt;Process Injection hakkında bir genelleme yaptık fakat bu ana başlık, farklı farklı teknikleri alt dallarında barındırmaktadır. Şimdi ise Process Injection tekniklerinin detaylarına değinecek ve en çok bilinen, etkili teknikleri açıklayacağız.&lt;/p&gt;

&lt;h2 id=&quot;1---remote-dll-injection&quot;&gt;1.   Remote DLL Injection&lt;/h2&gt;
&lt;p&gt;Remote DLL Injection metoduna geçmeden önce DLL hakkında kısa bir bilgi vermekte fayda var. Açılımı Dynamic Linking Library olan DLL’ler bir kod/veri kütüphanesidir. Bir çok uygulamanın ortak bir şekilde kullanması için tasarlanmıştır. DLL kullanımı daha fazla performans, daha az bellek kullanımı gibi faydalar sağlamaktadır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-2.png&quot; alt=&quot;Process Injection 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde de görüldüğü üzere MZ ve PE headerlarına sahip olmasına rağmen bir executable’ın karakteristiğine sahip olsa da tek başına çalışamamaktadır. Kısa bir şekilde DLL’den de bahsettiğimize göre Remote DLL Injection’a geçiş yapabiliriz.&lt;/p&gt;

&lt;p&gt;Remote DLL Injection metodu geçtiğimiz zamanlarda ve günümüzde sıkça kullanılmaktadır. Malware legal bir process’in virtual memory’sine zararlı DLL’in yolunu yazarak ve legal process’de remote thread oluşturarak bu zararlı DLL’in yüklenmesini sağlar.&lt;/p&gt;

&lt;p&gt;Öncelikle zararlının yapması gereken işlem Process32First, Process32Next ve CreateToolhelp32Snapshot ile az önce bahsettiğim **Process Walking **işlemlerini yapıp injekte olacağı process’i belirlemektir.&lt;/p&gt;

&lt;p&gt;Daha sonra ise OpenProcess API’sini kullanarak tespit ettiği hedef process’in handle’ını alır. Handle’ın tanımını Windows’un MSDN dökümanlarından alıntı yaparak açıklayacak olursak;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Handle, bir nesneye yapılan başvurudur. Bir process’in bir nesneye (dosya, kayıt defteri, mutex vb.) erişebilmesi bir handle açması gerekir. Örnek vermek gerekirse bir process’in dosyaya yazma işlemi yapmak istediğini düşünelim. Process önce gerekli API’yi(WriteFile) çağırır. Daha sonra  handle’ı WriteFile API’sine ileterek dosyaya yazmak için handle’ı(tanıcı da deniyor) kullanır.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Process’in handle’ını alan malware, daha sonra &lt;strong&gt;VirtualAllocEx&lt;/strong&gt; API’si ile bellekte allocate (yer ayırma) işlemi uygular. Daha sonra bellekte ayırdığı lokasyona  &lt;strong&gt;WriteProcessMemory&lt;/strong&gt; API’si ile zararlı DLL’in yolunu yazar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-3.png&quot; alt=&quot;Process Injection 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra bellekteki lokasyona yolu yazılan zararlı DLL’in thread’ler tarafından çalıştırılması gerekir. Bunun için de malware, &lt;strong&gt;CreateRemoteThread&lt;/strong&gt;, NtCreateThreadEx, RtlCreateUserThread gibi API’leri çağırır. Ve bu API’lerin içine DLL yükleme için kullanılan LoadLibrary API’sini yerleştirir. LoadLibrary API’sinin içerisine ise zararlı DLL’in yerini yerleştirir. Bu işlemlerden sonra Remote DLL Injection’ın pseudo kodu şu şekilde olmaktadır:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateRemoteThread(LoadLibrary(C:\Program Files\zararli.dll))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;CreateRemoteThread API’si artık bir çok güvenlik ürünü tarafından izlenmektedir. Akıllı bir malware geliştiricisi bu API’yi kullanmayacaktır. Aşağıdaki görselde ise bu yöntemi kullanan Rebhip worm’una ait bir statik kod analizini görmektesiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-4.png&quot; alt=&quot;Process Injection 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Örnek bir Remote DLL Injection sonrası amacımıza ulaşabiliyoruz:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-5.png&quot; alt=&quot;Process Injection 5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-apc-dll-injection&quot;&gt;2. APC DLL Injection&lt;/h2&gt;

&lt;p&gt;CreateRemoteThread() API’si ile Remote DLL Injection tekniğinin ardından şimdi ise APC DLL Injection tekniğini göreceğiz.&lt;/p&gt;

&lt;p&gt;Bu teknik, Remote DLL Injection tekniğine benzer. Fakat ayrım noktası, DLL enjekte işleminde CreateRemoteThread() API’si yerine Windows’un APC(Asynchronous Procedure Call)’sini kullanır. APC’nin kısa bir tanımını yapacak olursak;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;APC, belirli bir thread bağlamında eşzamansız olarak çalışan bir işlevdir. Her thread, hedef thread uyarılabilir bir duruma girdiğinde yürütülecek bir APC sırası içerir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yani özetleyecek olursak, APC threadlerin bekleme zamanında daha az bellek kullanması için tasarlanmış bir çalışma birimidir. Bir programın birden fazla thread ile çalıştığını varsayalım. Genellikle thread’ler birbirleri ile eşzamanlı olarak çalışır. Fakat bazı veriler hazır değilse (örneğin program kullanıcıdan girdi veya onay bekliyorsa) thread, stackt’te önemli bir miktarda memory’den yer ayırdığı ve bu bellek onay gelene kadar kullanılamayacağı için thread’i bekleme durumunda memory’de tutmak pek mantıklı olmayacaktır.&lt;/p&gt;

&lt;p&gt;Bundan ötürü thread stack’i bellekte daha az yer kaplayan bir nesne olarak oluşturulur. Ve bu nesne, kullanıcı girişlerini alan hizmete aktarılır. Kullanıcıdan yanıt alındığında hizmet bunu nesneye koyar ve nesneyi execute birimine iletir.&lt;/p&gt;

&lt;p&gt;Execute hizmeti ise bir veya daha fazla thread ve görev kuyruğundan oluşur. Her çalışan thread bir görev aldığında bunu execute eder. Herhangi bir görev olmadığında ise thread bekler ve böylece bellek kullanılmaz.&lt;/p&gt;

&lt;p&gt;Kısa bir şekilde APC’nin de tanımını yaptığımıza göre APC DLL Injection tekniğine geçebiliriz.&lt;/p&gt;

&lt;p&gt;Az önce thread’in uyarılabilir(alterable) duruma geçmesinden bahsetmiştik. Bir thread aşağıdaki API’lerden birisini çağırdığında alterable duruma geçebilir:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SleepEx();&lt;/li&gt;
  &lt;li&gt;SignalObjectAndWait();&lt;/li&gt;
  &lt;li&gt;MsgWaitForMultipleObjectsEx();&lt;/li&gt;
  &lt;li&gt;WairForMultipleObjectsEx();&lt;/li&gt;
  &lt;li&gt;WaitForSingleObjectEx();&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;APC DLL Injection tekniğinde temel amaç; malware’ın hedef process’teki alterable durumda olan veya alterable duruma geçme olasılığı bulunan thread’i tanımlaması ile başlar. Daha sonra zararlı olan custom code’u QueueUserAPC() API’sini kullanarak thread’in APC kuyruğuna yerleştirir. Daha sonra ise thread, kuyruğa alınan bu zararlı custom code’un sırası geldiğinde onu çalıştırır.&lt;/p&gt;

&lt;h3 id=&quot;örnekleyelim&quot;&gt;Örnekleyelim&lt;/h3&gt;

&lt;p&gt;Tekniği anlattık, şimdi ise kısa bir örnek verelim. Zararlı DLL’in legal iexplore.exe uygulamasını APC DLL Injection yöntemi ile enjeksiyonuna göz atacağız.&lt;/p&gt;

&lt;p&gt;Bu teknik, Remote DLL Injection’daki 4 adımın aynısını uygular. Yani bir handle açar, hedef process’in memory’sinde yer ayırır, malicious DLL’in yolunu ayrılan belleğe kopyalar ve LoadLibrary() API’sinin adresini belirler. Daha sonra ise hedef thread’in malicious DLL’i yüklemeye zorlanması için şu adımları izler:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OpenThread() API’si ile hedef process’in thread’ine bir handle açar. Parametrelerinden birisi ise iexplore.exe process’inin thread’inin ID’sidir.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-6.png&quot; alt=&quot;Process Injection 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OpenThread() API’sinin dönüş değeri iexplore.exe thread’inin handle’ı olmaktadır.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Malware process’i, Internet Explorer’ın thread’inin APC kuyruğundaki APC işlevini sıralamak için QueueUserAPC() API’sini çağırır.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bunun ilk parametresi malware’ın hedef thread’de yürütülmesini istediği  APC işlevinin işaretçisidir. Yani APC işlevi adresi daha önce belirlenen LoadLibrary() API’sinin kendisidir. İkinci parametresi ise hedef process’in hedef thread’inin handle’ıdır. Üçüncü parametresi ise hedef process’in memory’sinde yer alana zararlı DLL’in tam yolunu içeren adrestir. Thread execute işlemi yaptığında bu adres, LoadLibrary() API’sine parametre olarak iletilmekte ve zararlı DLL execute edilmektedir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-7.png&quot; alt=&quot;Process Injection 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Görselde de görüldüğü üzere 3. Parametre, iexplore.exe process’inin process memory adresidir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-8.png&quot; alt=&quot;Process Injection 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adrese baktığımızda ise zararlı DLL’in tam yolunu görmekteyiz.&lt;/p&gt;

&lt;h2 id=&quot;3-process-hollowing&quot;&gt;3. Process Hollowing&lt;/h2&gt;
&lt;p&gt;Başka bir kod enjeksiyon tekniklerinden birisi olan Process Hollowing, legal bir process’in belleğine zararlı executable’ın enjekte edilmesini amaç edinir.&lt;/p&gt;

&lt;p&gt;Process Hollowing tekniği, saldırgana bir çok avantaj sağlar. En önemlisi ise güvenlik ve adli analiz araçları tarafından fark edilmemesini sağlar. Örneğin legal bir process olan iexplore.exe’ye Process Hollowing tekniği olan bir malware üzerinden konuşacak olursak, process’in yolu legal process olan  iexplore.exe’nin yolunu gösterecektir. Ama iexplore.exe’nin belleğinde ise zararlı executable barınmaktadır.&lt;/p&gt;

&lt;p&gt;Hollowing’e sözcük bakımından genelde “kancalamak” denmektedir. Process Hollowing tekniğini gerçekleştirecek olan malware, öncelikle legal process’i suspend durumda başlatır.&lt;/p&gt;

&lt;p&gt;Suspend durumda başlayan legal process’in executable section’ı belleğe yüklenmiş olur. &lt;strong&gt;PEB&lt;/strong&gt; (Process Environment Block) yapısı, memory’e yüklenen legal process’in tam yolunu içerir. PEB’in ImageBaseAddress kısmı ise legal process’in bellekteki executable section’ının hangi adreste olduğunun bilgisini tutar.&lt;/p&gt;

&lt;p&gt;Aşağıdaki görselde malware tarafından suspend durumda başlatılan svchost.exe process’ini görüyoruz. Svchost.exe process’i belleğin &lt;strong&gt;0x01000000&lt;/strong&gt; adresine yüklenmiş durumda.&lt;/p&gt;

&lt;p&gt;Daha sonra malware, PEB.ImageBaseAddress kısmına erişmek için bellekteki PEB yapısının adresini belirler. ImageBaseAddress kısmına eriştiğinde ise legal process’in memory’deki base adresini elde eder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-9.png&quot; alt=&quot;Process Injection 9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PEB’in tespitinden sonra malware, &lt;strong&gt;GetThreadContext&lt;/strong&gt;() API’sini çağırır. GetThreadContext() API’si belirtilen thread’in içeriğini alır. Ve iki adet parametre alır. Bunlardan ilki thread’in handle’ıdır. İkinci parametre ise yapının CONTEXT adındaki pointer’ıdır.&lt;/p&gt;

&lt;p&gt;Malware ilk parametreye suspend edilen thread’in handle’ını, ikinci parametreye ise CONTEXT yapısının pointer’ını geçer. API çağrısından sonra CONTEXT yapısı, suspend edilen thread’in bağlamı (kaynağı) ile doldurulur.&lt;/p&gt;

&lt;p&gt;Bu CONTEXT yapısı artık askıya alınan register durumlarını içerir. Malware daha sonra PEB yapısının işaretçisini içeren CONTEXT._EBX alanını okur. PEB adresi belirlendikten sonra ise ImageBaseAddress kısmını okuduğunu söylemiştik. Bunu yapmasının amacı da legal executable’ın base adresini belirlemekti.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-10.png&quot; alt=&quot;Process Injection 10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde process belleğinin okunma işlemi görülmektedir.&lt;/p&gt;

&lt;p&gt;PEB pointer’ını tespit etmek için diğer bir yöntemin NtQueryInformationProcess API’si olduğunu söylemekte de fayda var. Hedef legal process’in base adresini belirleyen malware, legal process’in executable section’ını (çalıştırılabilir kısmını) bellekten ayırır (deallocate eder). Bunu da NtUnMapViewofSection() API’si ile gerçekleştirir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-11.png&quot; alt=&quot;Process Injection 11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde ilk parametrenin svchost.exe legal process’inin handle’ı, ikinci parametrenin ise legal process’in base adresi olduğunu görüyorsunuz. Bu işlemden sonra legal process’in executable section’ı bellekten ayrılmış, yani unmap edilmiş oluyor. Legal process’in memory’sinden boşaltılan, deallocate edilen kısımda ise RWX izinlerine sahip yeni bir kısım allocate edilir.&lt;/p&gt;

&lt;p&gt;Yeni bellek adresi önceki process ile aynı adreste veya farklı bir adreste allocate edilebilir. Yukarıdaki görselde VirtualAllocEx() API’sini memory’de &lt;strong&gt;0x00400000&lt;/strong&gt; adresinde ayırma yapması için çağırdığı görülmektedir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-12.png&quot; alt=&quot;Process Injection 12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde 0x00400000 adresinde allocate edilen bellek alanını görmektesiniz.&lt;/p&gt;

&lt;p&gt;Bellekte istediği lokasyondan &lt;strong&gt;RWX&lt;/strong&gt; izinlerinde yer ayırma işlemi yapan malware, &lt;strong&gt;WriteProcessMemory&lt;/strong&gt; API()’sini kullanarak yürütülebilir dosyayı ve section’larını 0x00400000 adresindeki ayrılan konuma kopyalar. Aşağıdaki görselde bu durum görülmektedir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-13.png&quot; alt=&quot;Process Injection 13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu işlemlerden sonra malware, legal process’in PEB.ImageBaseAddress kısmına, artık zararlı içerikle dolu olan 0x00400000 adresini yazar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-14.png&quot; alt=&quot;Process Injection 14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde de artık legal process’in PEB.ImageBaseAdress kısmında yazılı olan değerin 0x01000000’den artık içinde zararlı executable’ı barındıran 0x00400000 adresinin yazılı olduğunu görüyoruz. Yani kısacası malware, suspend halde olan legal process’in start adresini, bellekte legal process’in executable kısmına enjekte edilen zararlının start adresi ile değiştiriyor.&lt;/p&gt;

&lt;p&gt;Bu işlemden sonra artık suspend durumda olan process’in thread’i zararlı kısma işaret etmektedir. Artık saldırganın yapması gereken tek şey suspend edilen thread’in **ResumeThread() **API’si ile suspend durumdan resume durumuna geçmesini sağlayıp enjekte edilen kodu (ya da executable’ı) çalıştırmasını izlemektir.&lt;/p&gt;

&lt;p&gt;Ayrıca malware, zararlı executable’ı hedef işleme enjekte etmek için VirtualAllocEx() ve WriteProcessMemory() tekniklerinden kaçınmak amacıyla &lt;strong&gt;NtMapViewSection&lt;/strong&gt;() API’sini kullanabilmektedir. Bu API’de Process Hollowing tekniğinde kullanılan API’lerden birisidir.&lt;/p&gt;

&lt;h2 id=&quot;4-process-doppelgänging&quot;&gt;4. Process Doppelgänging&lt;/h2&gt;

&lt;p&gt;Popüler Code Injection tekniklerinden birisi olan Process Doppelgänging, ilk olarak 2017 yılında BlackHat’te enSilo şirketinde çalışan 2 güvenlik araştırmacısı tarafından açıklandı.&lt;/p&gt;

&lt;p&gt;Process Doppelgänging Windows 10 dahil olmak üzere tüm Windows sürümlerinde başarıyla çalışmasından dolayı büyük bir öneme sahiptir. Process Hollowing ile benzerlik gösterse, Process Hollowing’den kesin olarak ayrılan yönleri vardır.&lt;/p&gt;

&lt;p&gt;Process Doppelgänging, ilk ortaya çıktığı zamanlarda bir çok AV ürünü tarafından zor tespit edildiği için malware’lar tarafından sıkça kullanılmıştır..&lt;/p&gt;

&lt;h3 id=&quot;ayrım-noktası&quot;&gt;Ayrım Noktası?&lt;/h3&gt;

&lt;p&gt;Process Hollowing önce hedef işlemi başlatır, daha sonra unmap işlemini yapar ve zararlı kodu enjekte eder. Process Doppelgänging ise process başlamadan önce image’ın üzerine zararlı kodu yazmaktadır. En önemli ayrım noktaları ise bu tekniktir.&lt;/p&gt;

&lt;p&gt;Process Doppelgänging, Windows NTFS işlemlerini kullanmaktadır. TFS dosyasının işlemlerine(oluşturma, silme, değiştirme) dayanan bir tekniktir. İşlemsel NTFS, diğer adıyla TxF, process’leri NTFS dosya sistemine entegre eder. Process Doppelgänging, kötü amaçlı kodu veya yazılımı gizlemek için belirli olan bu özellikleri kullanır. Process’in çalışma esnasında bir dosya oluşturduğumuzu ve içine yazma işlemi yaptığımızı düşünelim. Windows’un yapısı gereği process dosya üzerindeki işlemini bitirmeden veya kapatmadan, dosya diskte görünmeyecektir. İşte Process Doppelgänging’in avantajlarından birisi de bu yöntemdir.&lt;/p&gt;

&lt;p&gt;Process Doppelgänging için NTFS işlemlerinde &lt;strong&gt;4 adet basamak&lt;/strong&gt; vardır. Bunları şu şekilde sıralayabilir ve açıklayabiliriz:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transact&lt;/strong&gt;:
Bu aşamada legal process işlenir ve üzerine malicious uygulama yazılır. Bu işlemin alt aşamaları bulunmaktadır:&lt;/p&gt;

&lt;p&gt;İlk olarak CreateTransaction() API’si kullanılarak yeni transaction(işlem) oluşturulur.
CreateFileTransacted() API’si ile işlem görmüş bir handle elde edilir. Bu handle gereken tüm dosya işlemleri için kullanılabilir.
Legal dosyanın üzerine WriteFile() API’si ile malicious içerik yazılır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load&lt;/strong&gt;:
Bu aşamada ise 1. Aşamada üzerine yazma işlemi yapılarak değiştirilen dosyadan bir memory bölümü oluşturulur. NtCreateSection() API’si ile işlem yapılan dosyadan bir bir bölüm oluşturulur. Bu bölüm, zararlı dosyaya işaret edecektir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rollback&lt;/strong&gt;:
Bu aşamada ise yapılan tüm değişiklikler geri alınır. Orijinal dosyayı diskte bırakır. RollbackTransaction() API’si ile bu işlemi gerçekleştirmektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution&lt;/strong&gt;:
Bu kısım Process Doppelgänging’in nasıl kaçamaklı, sahte ricatlı (geri çekilmeli) bir teknik olduğunu bize açıklayacaktır. İlk aşamadan itibaren, daha önce açılan bir process’i execute edebilecek, Windows XP’den beridir süregelen eski bir komut bulunmaktadır.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;İlk olarak process ve threadler, &lt;strong&gt;NtCreateProcessEx&lt;/strong&gt;() ve &lt;strong&gt;NtCreateThreadEx&lt;/strong&gt;() API’leri kullanılarak oluşturulur.&lt;/li&gt;
  &lt;li&gt;Process parametreleri &lt;strong&gt;RtlCreateProcessParameters&lt;/strong&gt;() API’si ile oluşturulur.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VirtualAllocEx&lt;/strong&gt;() API’si ve önceden kullanılan parametreler kullanılarak boş alan ayrılır.&lt;/li&gt;
  &lt;li&gt;Daha sonra ise &lt;strong&gt;NtResumeThread&lt;/strong&gt;() API’si kullanılarak ayrı bir process başlatılır.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sonuç olarak, dosya içeriği geri alındıktan sonra bile process enjekte edilmiş bir halde başlayabilir. Bu nedenle de bir çok AV ürünü tarafından hiçbir sorun yokmuş gibi gözükecektir.&lt;/p&gt;

&lt;p&gt;Örneğin, &lt;strong&gt;mimikatz&lt;/strong&gt; normal bir şekilde başlatıldığında AV sistemleri bunu hemen tespit edebildiler. Fakat legal bir process’e, Process Doppelgänging tekniği ile enjekte edilip başladığında AV sistemleri bunu tespit edemedi.&lt;/p&gt;

&lt;p&gt;Özet olarak yapmamız gereken şey, zararlı içeriğin tam yolunu vermek iken rollback işleminden sonra PE içeriğine sahip bir bölümü parametre olarak alan Zw/NtCreateProcessEx() API’si vardır. Bu API’yi kullanarak dosyasız bir şekilde injection yapmış gibi oluruz ve işletim sistemi sadece dosya kapandığında değişikleri farkedeceği için bunu algılayamaz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-15.png&quot; alt=&quot;Process Injection 15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde &lt;strong&gt;NtCreateProcessEx&lt;/strong&gt;() API’sinin yapısını görmektesiniz.&lt;/p&gt;

&lt;p&gt;Bu teknik tamamen gizli değildir, ve tespiti de snapshot yöntemleri kullanılarak ve karşılaştırmalar ile yapılabilir. Sonuçta Remote bir thread oluşturduğu için AV sistemlerini tetikleyebilir.&lt;/p&gt;

&lt;p&gt;2017 yılında ortaya çıkmış bir teknik olarak günümüzdeki AV sistemlerinin bu tekniği tespit edebileceğini söyleyebiliriz.&lt;/p&gt;

&lt;h2 id=&quot;5-atom-bombing-injection&quot;&gt;5. Atom Bombing Injection&lt;/h2&gt;

&lt;p&gt;Process Doppelgänging kod enjeksiyon tekniğinin ardından Atom Bombing Injection tekniğine geliyoruz. Atom Bombing tekniğini, yine adını az önceki Process Doppelgänging tekniğinden de hatırlayacağınız enSilo şirketinde çalışan güvenlik araştırmacıları bulmuştur.&lt;/p&gt;

&lt;p&gt;Atom Bombing tekniği Windows’un tüm sürümlerinde çalışmaktadır. Bir bug veya zafiyet değildir, aksine Windows’un doğası gereği ortaya çıkan bir tekniktir. Bundan dolayı da herhangi bir yama söz konusu değildir.&lt;/p&gt;

&lt;p&gt;Ortaya çıkmasından sonra artık AV ürünleri tarafından tespiti de yapılabilmektedir. Bu teknik ise 2018 yılında ortaya çıkmıştır.&lt;/p&gt;

&lt;p&gt;Atom Bombing, adını Windows’un atom tablolarından almaktadır. Atom tabloları, process’ler arasında paylaşılan sistem belleğini kullanarak veri paylaşımı/değişimi gibi işlemleri gerçekleştirir. Atom tablolarını Windows şu şekilde tanımlamaktadır:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Atom tablosu, strings’leri ve karşılık gelen tanımlayıcıları saklayan sistem tanımlı bir tablodur. Bir uygulama, bir string’i atom tablosuna yerleştirir ve o string’e erişmek için 16 bitlik bir tam sayı alır. Atom tablosuna yerleştirilen bu string’e atom adı verilir.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bu açıklamadan yola çıkarak bu tekniğin arkasında yatan planı da az çok kurguluyor gibiyiz. Malware process’i legal bir string yerine zararlı kodu atom olarak oluşturuyor ve hedef olan legal process’in bu oluşturulan zararlı atom’u yükleyerek çalıştırmasını sağlıyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/process-injection-teknikleri/img/procinj-16.jpg&quot; alt=&quot;Process Injection 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki görselde Atom Bombing tekniğinin çalışma yapısı gösterilmiştir. Atom Bombing tekniğinin nasıl gerçekleştiğini anlamak için teknik olarak açıklayalım:&lt;/p&gt;

&lt;p&gt;Malware (zararlı process), GlobalAddAtom() ile zararlı kodu string biçiminde atom tablosuna yerleştirir. Atom tablosu sistemde çalışan her process tarafından erişilebilir durumdadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;APC&lt;/strong&gt;(Asynchronous Procedure Call) kullanarak, &lt;strong&gt;GlobalGetAtomName&lt;/strong&gt;() ile zararlı kodu atom tablosundan legal process’in bellek alanına kopyalar. APC kullanıldığı için bu teknik alterable durumda olan herhangi bir process’in thread’i tarafından yapılabilir.&lt;/p&gt;

&lt;p&gt;Daha sonrasında ise sistemi yeni bir executable bellek allocate etmeye zorlar. Bellek allocate işleminden sonra zararlı kodu ayrılan bellek alanına kopyalar ve çalıştırır.&lt;/p&gt;

&lt;p&gt;Yukarıdaki adımlarda da teknik detayını açıkladık. Bu tekniğin hakkında önemli olan bazı kısımlar mevcuttur.&lt;/p&gt;

&lt;p&gt;Atom Bombing, bir Privilege Escalation(yetki yükseltme) sağlamaz. AV ürünleri tarafından beyaz listede olan process’leri hedef alarak bypass yapar.&lt;/p&gt;

&lt;p&gt;Process’in özel verilerine erişmeye imkan sağlar. Yani belirli bir process’i hedef aldığınızda, (Web Browser gibi), web içeriğini değiştirebilir, tarayıcıdaki parolalara erişebilirsiniz. Ekran görüntüsü alabilirsiniz. Bu tamamen hangi process’i hedef aldığınıza bağlı olmak ile birlikte saldırgana çok geniş imkanlar sunmaktadır.&lt;/p&gt;

&lt;p&gt;Gerçek bir örnek vermek gerekirse Dridex bankacılık trojanı, bu teknik ortaya çıktıktan sonra Atom Bombing’i kullanmaya başlamıştır. Bilin bakalım neden 🙂&lt;/p&gt;

&lt;p&gt;Atom Bombing tekniğinin APC’yi kullandığını tekrar hatırlayalım. APC hakkında çok az bilgi mevcut. Ama örneklendirmek gerekirse normal işlevinde ilerleyen başka bir process’in thread’ini zararlı kodu çalıştırmak için Malware’lar tarafından kullanılmaktadır.&lt;/p&gt;

&lt;p&gt;Sizlere en çok ses getiren, ilginç ve işe yarar Process Injection tekniklerini anlattım. Artık svchost.exe’nin legal bir sistem uygulaması olduğunu ve zararlı yazılımların da uğrak yeri olduğunu biliyoruz 🙂&lt;/p&gt;

&lt;p&gt;Başka bir teknik makalede görüşmek üzere…&lt;/p&gt;

&lt;h2 id=&quot;yararlanılan-kaynaklar&quot;&gt;Yararlanılan Kaynaklar&lt;/h2&gt;

&lt;p&gt;[1] https://www.elastic.co/blog/ten-process-injection-techniques-technical-survey-common-and-trending-process&lt;/p&gt;

&lt;p&gt;[2] https://www.deepinstinct.com/2019/09/15/malware-evasion-techniques-part-1-process-injection-and-manipulation&lt;/p&gt;

&lt;p&gt;[3] https://kaganisildak.com/2019/02/10/process-doppelganging/&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="apc dll injection" /><category term="atom bombing injection" /><category term="process doppelganging" /><category term="process hollowing" /><category term="process injection" /><category term="process injection techniques" /><category term="process walking" /><category term="remote dll injection" /><summary type="html">Hiç legal bir sistem uygulamasının sistem kaynaklarını gereğinden fazla tüketme ve olağan dışı ağ hareketleri gibi alışılmadık davranışlarda bulunduğunu farkettiniz mi? Forumlarda sık sık karşımıza çıkan “svchost.exe virüs müdür?” gibi sorulara işin farklı bir yüzünden en teknik detayları ile cevap veriyorum. Bir eğitim niteliğinde olan bu makalemizde sizlere Process Injection Tekniklerini olabildiğince detaylı ve açıklayıcı şekilde anlattım.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/process-injection-teknikleri/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/process-injection-teknikleri/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pratik Wireshark 🦈 Filtreleri</title><link href="https://fatihsensoy.com/Pratik-WireShark-Filtreleri/" rel="alternate" type="text/html" title="Pratik Wireshark 🦈 Filtreleri" /><published>2020-03-25T09:05:00+00:00</published><updated>2020-03-25T09:05:00+00:00</updated><id>https://fatihsensoy.com/Pratik-WireShark-Filtreleri</id><content type="html" xml:base="https://fatihsensoy.com/Pratik-WireShark-Filtreleri/">&lt;p&gt;Malware analistlerin C&amp;amp;C sunucuları, Network ve Sistem Adminlerin hataları tespit etmekte kullandığı popüler ve alanındaki en iyi paket analiz aracı Wireshark’ı hepimiz biliyoruz. Kimimiz 100.000 paketi tek tek inceliyor, kimimiz ise aradığına FİLTRE adı verilen efsanevi özellik ile direk nokta atışı yapıyor. Tabi biz ilk seçenek için yazmadık bu yazıyı 🙂 Network paket analizi yaparken aradığınızı elinizle koymuş gibi bulmanız için &lt;strong&gt;İşinize Yarayacak 20 Wireshark Filtresini&lt;/strong&gt; sizler için derledim.&lt;/p&gt;

&lt;p&gt;1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.addr == 192.168.1.1&lt;/code&gt;
Bu filtremiz Source veya Destination’da ilgili IP olan paketleri bizlere sunuyor.&lt;/p&gt;

&lt;p&gt;2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.addr == 192.168.1.1 &amp;amp;&amp;amp; ip.addr == 10.0.0.3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bahsi geçen iki IP adresini VE bağlacı ile bağlamış. Yani Source veya Destination’da bu ikisi olmak zorunda. Hangisi Destination, hangisi Source önemli değil.&lt;/p&gt;

&lt;p&gt;3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.addr == 192.168.0.0/24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;192.168.0.x adresindeki 255 IP adresinden birisi paketlerde var ise, ilgili paketi önümüze getirir.&lt;/p&gt;

&lt;p&gt;4)&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; ip.src == 192.168.1.16 &amp;amp;&amp;amp; ip.dest == 10.0.0.12&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Source’u 192.168.1.16, Destination’ı 10.0.0.12 olan paketleri filtreler.&lt;/p&gt;

&lt;p&gt;5) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.addr != 192.168.1.16&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;İlgili IP adresinin olmadığı tüm paketleri filtreler.&lt;/p&gt;

&lt;p&gt;6) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp.port == 8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8080 portuna bağlantı sağlayan paketleri filtreler.&lt;/p&gt;

&lt;p&gt;7) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp.port in {443 80 8443}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Birden fazla TCP portunun bağlantı yapıldığı paket arıyorsanız, kullanışlı bir filtredir.&lt;/p&gt;

&lt;p&gt;8) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp.flags &amp;amp; 0x02&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TP bayrağı 0x02 oan paketleri filtreler. 0x02, SYN bitine karşılık gelmektedir. Aynı şekilde tcp.flags.syn == 1 filtresi de aynı anlama gelmektedir. Ayrıca bu filtre hem SYN, hemde SYN/ACK paketlerini gösterecektir. Sadece SYN paketlerini göstermek istiyorsanız da tcp.flags.syn == 1 &amp;amp;&amp;amp; tcp.flags.ack == 0 filtresini kullanmanız gerekir.&lt;/p&gt;

&lt;p&gt;9) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp contains FLAG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TCP paketlerinin içerisinde FLAG string’i olan paketi filtreler. Özellikle CTF yarışmalarında işimize yarayacağı aşikar 🙂&lt;/p&gt;

&lt;p&gt;10)&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; http.request.uri == “https://fatihsensoy.com/”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Spesifik bir web sitesine gönderilen veya alınan paketleri filtrelemenize olanak sağlar.&lt;/p&gt;

&lt;p&gt;11) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.host matches “microsoft\.(org|com|net|tr)”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Microsoft adının com, org, net veya tr domainleri ile alakalı giden veya gelen bir paket var ise filtreler.&lt;/p&gt;

&lt;p&gt;12) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.request.method == “POST”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;POST isteğinde bulunan tüm paketleri filtreler.&lt;/p&gt;

&lt;p&gt;13) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.host == “www.google.com”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Belirtilen URL’in host olduğu paketleri bize sunar. Dikkat edilmesi gereken bir nokta mevcuttur. URL tam olarak yazılmalıdır. Yani web sitesinin başında www var ise eksik bırakılması halinde doğru filtreleme yapılmayacaktır.&lt;/p&gt;

&lt;p&gt;14) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.response.code == 200&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yapılan Request sonucu dönen Response kodu 200 (yani başarılı bağlantı) olan paketleri filtreler. Aynı şekilde 404 (bulunamadı), 403 (yetkisiz erişim/yasak) gibi tüm HTTP response kodlarını da filtreleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;15) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.content.type == “audio/mpeg”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HTTP paketlerinin içerisinde mpeg türündeki ses dosyaları bulunan paketleri filtreler. Başka içerikleri de kolay bir şekilde filtreleyebilirsiniz. Örneğin “image/jpeg” gibi.&lt;/p&gt;

&lt;p&gt;16)&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; udp.port == 69&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;İlgili UDP portuna gönderilen veya alınan paketleri filtreler.&lt;/p&gt;

&lt;p&gt;17) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan.ssid == Isyeri_Wifi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;İlgili WIFI’ın SSID’sine yapılan ve alınan paketleri bize sunar.&lt;/p&gt;

&lt;p&gt;18) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan.addr == 00:1c:12:dd:ac:4d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;İlgili WLAN MAC adresine yapılan ve alınan paketleri filtreler.&lt;/p&gt;

&lt;p&gt;19) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icmp.type == 8 &amp;amp;&amp;amp; imcp.type == 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ICMP echo 8, echo reply 0 olarak ayarlanan bu filtre bize sadece ICMP Request’lerini filtrelemektedir.&lt;/p&gt;

&lt;p&gt;20) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icmp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bunun gibi tekli kullanımlar da mevcuttur. Fazla ayrıntıya girmeden direk ilgili protokolün olduğu tüm paketleri filtreler. Tahmin edebileceğini üzere http, dns, tcp, udp gibi tekli filtremeler de mevcuttur.&lt;/p&gt;

&lt;p&gt;Kısa bir şekilde faydalı olabileceğini düşündüğüm Wireshark filtrelerini sizler için derledim. Eğer sizin de “&lt;strong&gt;Şu filtre olmadan bu yazı olmaz!&lt;/strong&gt;” dediğiniz, önemli gördüğünüz bir filtre var ise yorumlarda paylaşabilir, yazıyı güncellememe yardımcı olabilirsiniz 🙂&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="Genel" /><category term="wireshark filters" /><category term="wireshark filtreleri" /><category term="wireshark for network analysis" /><category term="wireshark for infected traffic" /><category term="wireshark ctf" /><summary type="html">Malware analistlerin C&amp;amp;C sunucuları, Network ve Sistem Adminlerin hataları tespit etmekte kullandığı popüler ve alanındaki en iyi paket analiz aracı Wireshark’ı hepimiz biliyoruz. Kimimiz 100.000 paketi tek tek inceliyor, kimimiz ise aradığına FİLTRE adı verilen efsanevi özellik ile direk nokta atışı yapıyor. Tabi biz ilk seçenek için yazmadık bu yazıyı 🙂 Network paket analizi yaparken aradığınızı elinizle koymuş gibi bulmanız için İşinize Yarayacak 20 Wireshark Filtresini sizler için derledim.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/pratik-wireshark-filteleri/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/pratik-wireshark-filteleri/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Radare2 - Reverse Onsuz Olmaz</title><link href="https://fatihsensoy.com/radare2-reverse-onsuz-olmaz/" rel="alternate" type="text/html" title="Radare2 - Reverse Onsuz Olmaz" /><published>2020-02-04T19:49:00+00:00</published><updated>2020-02-04T19:49:00+00:00</updated><id>https://fatihsensoy.com/radare2-reverse-onsuz-olmaz</id><content type="html" xml:base="https://fatihsensoy.com/radare2-reverse-onsuz-olmaz/">&lt;p&gt;Herkese selamlar arkadaşlar. Bu teknik makalemizde sizlere adını sıkça duyduğunuz Radare2’nin kısa ama faydalı, elinizin altında bir not niyetinde tutabileceğiniz bir tanıtımını yapacağım.&lt;/p&gt;

&lt;h3 id=&quot;radare2-nedir&quot;&gt;Radare2 Nedir?&lt;/h3&gt;

&lt;p&gt;Radare2 hem disassembler, hem de bir debugger’dır. IDA ve Ollydbg’ın birleşiminin 2-3 katı yetenekte bir araç olarak da tanımlayabiliriz. Kendinizi bir Reverse Engineer olarak tanımlıyorsanız basic seviyede de olsa bilmeniz gerektiğini düşündüğüm bir araçtır. Alıştıktan sonra sizi çok iyi bir analist veya Reverse Engineer yapabilecek türden bir araçtır. Linux ve Windows için sürümleri bulunmaktadır fakat Windows’un ilkel terminalinden dolayı pek zevk alamayabilirsiniz. O yüzden şahsen ben Linux üzerinde kullanıyorum.&lt;/p&gt;

&lt;h4 id=&quot;diğerlerinden-farkı-nedir&quot;&gt;Diğerlerinden Farkı Nedir?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Open-source ve ücretsizdir,&lt;/li&gt;
  &lt;li&gt;Çok fonksiyonel bir yapısı olması,&lt;/li&gt;
  &lt;li&gt;Yardımcı araçlarının kullanışlı olması,&lt;/li&gt;
  &lt;li&gt;Terminalde çalışmasına rağmen kullanımı kolaylaştıran grafiksel arayüze sahip olması şeklinde sıralayabiliriz.&lt;/li&gt;
  &lt;li&gt;Kullanışlı özellikler tek bir çatıda toplandı!&lt;/li&gt;
  &lt;li&gt;Veri analizi, binary’i patchleme, verileri karşılaştırma, yeniden yerleştirme (replacing), görselleştirme ve çok daha fazlasını sunuyor.&lt;/li&gt;
  &lt;li&gt;Bir çok mimariyi ve dosya formatını destekler.&lt;/li&gt;
  &lt;li&gt;Şu ana kadar Radare2 ile isteyip de açılamayan, debug edilemeyen herhangi bir dosyaya çok az rastlanmaktadır.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rabin2&quot;&gt;Rabin2&lt;/h3&gt;

&lt;p&gt;Rabin2, Radare2’nin bir yardımcı aracıdır. Binary’den info vermektedir. Binary’den stringler, derleme zamanı, programın yazıldığı dil gibi bir çok faydalı bilgiyi çıkarır ve bizlere daha analize başlamadan önce ön bilgi verir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-1.png&quot; alt=&quot;Rabin2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ayrıca stringleri tek tek, disassemble ettikten sonra aramak yerine Rabin2 sayesinde de ortaya dökebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-2.png&quot; alt=&quot;Rabin2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt; parametresi bize data segmentindeki stringleri döküyor. Eğer tüm binarydeki stringleri dökmek istiyorsak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-zz &lt;/code&gt;parametresini kullanmalıyız.&lt;/p&gt;

&lt;p&gt;Elf, PE, Mach-O, Java Sınıfları ve çok daha fazla dosyayı yorumlayabilmektedir.&lt;/p&gt;

&lt;h3 id=&quot;başlayalım&quot;&gt;Başlayalım!&lt;/h3&gt;

&lt;p&gt;Radare2’nin bazı kullanım şekilleri mevcuttur.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radare2 dosya.exe&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2 dosya.exe&lt;/code&gt; şeklinde iki adet kullanımı vardır.
Komutumuzu verdikten sonra binary’i analiz etmemiz gerekmekte.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa&lt;/code&gt; komutu ile ( analyse all ) tüm binary’i analiz edebilir. Daha detaylı analiz etmek için aaa komutunu kullanabiliriz. Analiz işlemi ile birlikte binary’deki stringleri , fonksiyonları ve daha birçok önemli
bilgiyi açığa çıkarmış oluyoruz.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaaa&lt;/code&gt; ile de en üst seviyede analiz yapmış oluyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-3.png&quot; alt=&quot;Radare2-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Radare2 kullanırken en büyük yardımcımız tabiki de dahili de dökümanları ya da help komutları olacaktır.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; komutu ile tüm help dökümanlarına ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-4.png&quot; alt=&quot;Radare2-4&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;seek-sıçrama-komutları&quot;&gt;Seek (Sıçrama) Komutları&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seek&lt;/code&gt; komutu ile memorydeki belirli bir adrese gidebiliyoruz. Yani bizim sıçrama komutumuz kısacası.&lt;/p&gt;

&lt;p&gt;Örnek olarak; eğer adı değiştirilmemiş ise main fonksiyonuna &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s main&lt;/code&gt; komutuyla sıçrayabiliriz. Ya da 0x581236 adresine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s 0x581236&lt;/code&gt; şeklinde sıçrama yapabiliriz. Sadece &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; komutunu kullanarak da mevcut bulunan adresi ekrana basabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s- &lt;/code&gt; komutu ile bir önceki adrese gidebiliriz. s- n komutu ile n adres undo&lt;/p&gt;

&lt;p&gt;yapabiliyoruz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s--&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s++&lt;/code&gt; komutunun etkileri de aşağıdadır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-5.png&quot; alt=&quot;Radare2-5&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flagler&quot;&gt;Flagler&lt;/h4&gt;

&lt;p&gt;Analizden sonra Radare2, çıktıları bazı offsetler ile ilişkilendirir. Bunlar;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Strings&lt;/li&gt;
  &lt;li&gt;Symbols&lt;/li&gt;
  &lt;li&gt;Sections&lt;/li&gt;
  &lt;li&gt;Relocs&lt;/li&gt;
  &lt;li&gt;Imports&lt;/li&gt;
  &lt;li&gt;Functions olarak sıralandırılabilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ve bunlara da genel olarak &lt;strong&gt;flag&lt;/strong&gt; adı verilir. Flagler analizlerde bize en çok yardımcı olacak noktalardan birisidir. Hangi fonksiyonların kullanıldığı ve importlar özellikle Malware Analizi’nde çok işimize yaramaktadır.&lt;/p&gt;

&lt;p&gt;Var olan flaglerin listesini görüntülemek için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt; komutu kullanılır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-6.png&quot; alt=&quot;Radare2-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bir flagin içeriğini görüntülemek için ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs &amp;lt;flag adı&amp;gt;; f&lt;/code&gt; komutu kullanılır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-7.png&quot; alt=&quot;Radare2-7&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;analiz-ve-stringler&quot;&gt;Analiz Ve Stringler&lt;/h4&gt;

&lt;p&gt;Şimdiye kadar stringleri ekrana Rabin2 yardımcı aracı ile basıyorduk. Ama analiz esnasında nasıl ekrana basacağız? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iz&lt;/code&gt; komutu sadece data segmentteki stringleri ekrana basacaktır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;izz&lt;/code&gt; ise binary içerisindeki tüm stringleri ekrana basacaktır. Bu kullanımlar Rabin2’nin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-zz&lt;/code&gt; parametreleriyle benzerlik göstermektedir.&lt;/p&gt;

&lt;p&gt;Tek farkı birini programı analiz etmeden önce, diğerini ise programı analiz ederken kullanıyor olmamızdır. Genel olarak bir C programında eğer printf veya herhangi bir çıktı fonksiyonu ile ekrana bir string basılıyor ise bu, &lt;strong&gt;str.&lt;/strong&gt; etiketi ile ilişkilendirilir ve Radare2’de bunu bu şekilde yorumlar. Bize string olduğunu bildirir. Biz sadece str. etiketine sahip tüm stringleri bastırmak istiyorsak da &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axt @@ str.*&lt;/code&gt; komutunu kullanabiliriz. Bu komut bize istediğimizi verecektir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-8.jpg&quot; alt=&quot;Radare2-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu komutu kullandık ama buraya girdiğimiz komutçuklar ne işe yarıyor? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axt&lt;/code&gt; komutu &lt;strong&gt;‘verilen referanstaki kodu/veriyi bul&lt;/strong&gt;’ anlamına gelmektedir. **@@ ** işaretleri ise PHP’den de bildiğimiz foreach yineleyici fonksiyonu gibidir. Offset listesi üzerindeki bir komutu tekrar tekrar çalıştırmak için kullanılır. str. ise string bayraklarını ifade etmektedir. Tüm bu kombinasyon bize sadece kullanılan stringleri değil, aynı zamanda kullanılan isimleri ve referans verilen komutları da listeliyor.&lt;/p&gt;

&lt;h4 id=&quot;fonksiyon-listesi&quot;&gt;Fonksiyon Listesi&lt;/h4&gt;

&lt;p&gt;Analiz ettiğimiz hedef programımızda import edilen fonksiyonları görüntülemek için ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afl&lt;/code&gt; komutunu kullanacağız. &lt;strong&gt;Analyze Functions List&lt;/strong&gt; anlamına gelen bu komut bize kritik bilgiler vermektedir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-9.png&quot; alt=&quot;Radare2-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Programın assembly kodlarını görmek için Disassemble komutunu girmemiz gerekir. Eğer bir fonksiyonun içerisindeysek &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdf&lt;/code&gt; &lt;strong&gt;(print disassemble functions)&lt;/strong&gt; komutunu girerek fonksiyonu disassemble edebiliriz. Eğer içinde bulunduğumuz adres bir fonksiyon değil ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pd&lt;/code&gt; &lt;strong&gt;(printf disassemble)&lt;/strong&gt; komutunu girerek assembly kodlarına erişebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-10.png&quot; alt=&quot;Radare2-10&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;registerlar&quot;&gt;Registerlar&lt;/h4&gt;

&lt;p&gt;Öncelikle hangi registerların olduğunu görmek için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dr&lt;/code&gt; komutunu kullanıyoruz. Registerların içeriğini ekrana basmak istersek de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pxr @ &amp;lt;register adı&amp;gt;&lt;/code&gt; veya &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pxr @ &amp;lt;register adresi&amp;gt;&lt;/code&gt; şeklinde komutlarımızı kullanabiliriz. Ayrıca bazı özel kullanımlar mevcuttur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-11.png&quot; alt=&quot;Radare2-11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x/16x @ rip&lt;/code&gt; komutu ile rip registerının ne kadarlık bir alanının gösterileceğini belirtir ve ekrana basarız. Daha fazla veri göstermek istiyorsak 16x size’ını daha da artırmalıyız.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-12.png&quot; alt=&quot;Radare2-12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dr ebx = 0x01&lt;/code&gt; komutu ile istediğimiz register’ı istediğimiz değere set edebiliyoruz.&lt;/p&gt;

&lt;h4 id=&quot;görsel-modu-kullanma&quot;&gt;Görsel Modu Kullanma&lt;/h4&gt;

&lt;p&gt;Farklı varyasyonları bulunmaktadır (V). Fakat bizim kullanacağımız ve en işlevli varyasyonu olan vv modunu kullanacağız.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VV&lt;/code&gt; komutunu girererek konsol ekranı üzerinden görsel arayüze ulaşabilirsiniz. Görsel modun da kendi içinde farklı modları bulunmaktadır. &lt;strong&gt;P&lt;/strong&gt; tuşuna basarak farklı modlara geçiş yapabilirsiniz. Ayrıca Mouse’u kullanabilirsiniz. Menülere Mouse ile tıklayabilir ve ok tuşları, enter ile seçiminizi yapabilirsiniz. Görsel modda bir çok özellik bulunmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;k&lt;/strong&gt; ve &lt;strong&gt;j&lt;/strong&gt; tuşlarıyla da aşağı yukarı şekilde kodların içinde gezinebilirsiniz. Enter ile de odaklandığınız sekmeyi tam ekran yapabilirsiniz. Ayrıca &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vv&lt;/code&gt; komutu ile sekmeli görünüme geçiş yapabilirsiniz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; komutu ile görsel modda iken Radare2 komutlarını kullanabilirsiniz. Örneğin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;: s main&lt;/code&gt; şeklinde kullanımı mevcuttur.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; komutu ile bulunduğunuz satıra yorum ekleyebilir veya var olan yorumu silebilirsiniz. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; bu komut ile yorum ekleyebilirsiniz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; -&lt;/code&gt; bu komut ile yorumu silebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; ve &lt;strong&gt;–&lt;/strong&gt; tuşlarına basarak zoom in veya zoom out yapabilirsiniz. Bu aynı zamanda IDA’daki graph view özelliğini kazandırmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;q&lt;/strong&gt; tuşu ile de Graph Mode’dan çıkış yapıp konsol moduna geri dönebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-13.png&quot; alt=&quot;Radare2-13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-14.png&quot; alt=&quot;Radare2-14&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;binary-patching&quot;&gt;Binary Patching&lt;/h4&gt;

&lt;p&gt;Radare2’nin en önemli özelliklerinden birisi ise koda istediğimiz gibi müdahale etme seçeneğimizin olması. Yani kodu patch edebiliriz. Malware analizlerinde anti-vm ve başka önlemleri atlatmak için bypass yapmamız gerektiğini hepimiz biliyoruz. Bunun için de Radare2’nin patch özelliğini kullanmak akıllıca olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hadi Başlayalım!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Öncelikle Radare2’yi yazma modunda ve özelliklerinde başlatmamız gerekiyor.&lt;/p&gt;

&lt;p&gt;Bunun için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2 -w dosya.exe&lt;/code&gt; komutu kullanılır.&lt;/p&gt;

&lt;p&gt;Her zaman olduğu gibi ilk iş olarak binary’i analiz ediyoruz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaaa&lt;/code&gt; yeterli düzeyde analizi tamamlıyoruz. Programımızı patchlemek için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vv&lt;/code&gt; komutu sekmeli görünüm moduna alıyoruz.&lt;/p&gt;

&lt;p&gt;Şimdi ise Görsel Moda geçiş yaptık ve ok tuşlarıyla gezinebiliyoruz. Aktif olarak bulunduğumuz satırın komutunu değiştirmek için büyük ‘&lt;strong&gt;A&lt;/strong&gt;’ tuşuna basıyoruz. Ve istediğimiz assembly kodunu yazıp Enter’a basıyoruz. Artık ilgili satırda bizim yazdığımız kod görünür oldu.&lt;/p&gt;

&lt;p&gt;Daha sonra ise hiçbir kaydetme işlemine gerek kalmadan &lt;strong&gt;q&lt;/strong&gt; tuşuna basarak çıkış yapıyoruz. Ve otomatik olarak değişikliklerimiz kaydediliyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-15.png&quot; alt=&quot;Radare2-15&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;binary-search&quot;&gt;Binary Search&lt;/h4&gt;

&lt;p&gt;Radare2’nin en güzel özelliklerinden birisi de assembly kodları içerisinde arama yapabilmemizdir. Birçok şekilde arama yapma seçeneğimiz mevcuttur. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; Komutunu kullanarak tüm komutlara ve dolayısıyla da arama komutlarına ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ fatih&lt;/code&gt; komutu kodların içerisinde ‘&lt;strong&gt;fatih&lt;/strong&gt;’ stringini arayacaktır ve bulduğu sonuçları bize adresleri ile dönecektir.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/x! 52&lt;/code&gt; komutu bize binarydeki hex olarak &lt;strong&gt;52&lt;/strong&gt; olan sonuçları ekrana basacaktır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; /a jmp eax&lt;/code&gt; komutu, kodu disassemble edecek ve sonra da** jmp eax**’ı bulup adresiyle birlikte&lt;/p&gt;

&lt;p&gt;ekrana basacaktır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/x 1234&lt;/code&gt; komutu, hex stringlerde &lt;strong&gt;1234&lt;/strong&gt;’ü arayacaktır ve adresini ekrana basacaktır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ca&lt;/code&gt; komutu, eğer var ise memory’deki &lt;strong&gt;AES&lt;/strong&gt; anahtarlarını bulur.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cr&lt;/code&gt; komutu, eğer var ise memory’deki** RSA Private Key**’leri bulur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-16.png&quot; alt=&quot;Radare2-16&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;radare2-ve-debugging&quot;&gt;Radare2 Ve Debugging&lt;/h4&gt;

&lt;p&gt;Radare2’nin en can alıcı özelliklerinden birisine geldik. Kendisi birçok mimariyi ve dosya tipini destekliyor demiştik. O yüzden de PE dosyalarında Mach-O dosyalarına kadar çoğu dosya tipini debug edebiliyoruz.&lt;/p&gt;

&lt;p&gt;Bu özelliği Malware Analizinde Dinamik Analiz yaparken çok işimize yaramaktadır. Debug işlemine başlamadan önce Radare2’yi debug modunda başlatmamız gerekiyor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2 -d dosya.exe&lt;/code&gt; şeklinde debug modunda programımızı başlatmış olduk.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2 -d dosya.exe &amp;lt;arg1&amp;gt; &amp;lt;arg2&amp;gt;&lt;/code&gt; komutu ile programımıza argüman girebiliyoruz. Tabiki programımız argüman alıyor ise :)&lt;/p&gt;

&lt;p&gt;Debugger komutlarına&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; d?&lt;/code&gt; komutu ile ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db 0x25466d&lt;/code&gt; komutu ile belirtilen adrese breakpoint koyabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt;  komutu ile var olan breakpointleri görebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db- 0x25466d&lt;/code&gt; komutu ile belirtilen breakpointi silebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db-*&lt;/code&gt; komutu ile var olan tüm breakpointleri kaldırabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbd 0x25566d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Var olan breakpointi kaldırmadan, devre dışı bırakabiliriz&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbe 0x25566d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Devre dışı olan breakpointi, etkin hale getirebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc&lt;/code&gt; programı direk çalıştırır. &lt;strong&gt;(Continue execution)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dcc&lt;/code&gt; programı call’a kadar çalıştırır. &lt;strong&gt;(Continue Until Call)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dcr&lt;/code&gt; rogramı return’a kadar çalıştırır. &lt;strong&gt;(Continue Until Return)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; dcu main&lt;/code&gt; programı &lt;strong&gt;main&lt;/strong&gt;’e kadar çalıştırır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dcu 0x256674d&lt;/code&gt; programı belirtilen adrese kadar çalıştırır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ds&lt;/code&gt; fonksiyonların içine girerek (girilebiliyorsa) bir defa ilerletir.(Step Into)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ds 10&lt;/code&gt; programı fonksiyon içine girerek 10 instruction daha çalıştırır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dso&lt;/code&gt; fonksiyonların içine girmeden bir defa ilerletir.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dso 10&lt;/code&gt; programı fonksiyon içine girmeden 10 instruction daha çalıştırır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ood&lt;/code&gt; programımızı debug modunda &lt;strong&gt;restart&lt;/strong&gt; eder.&lt;/p&gt;

&lt;h4 id=&quot;radare2-memory&quot;&gt;Radare2 Memory&lt;/h4&gt;

&lt;p&gt;Radare2’nin memory kısmında da çok işlevli ve yararlı fonksiyonları bulunuyor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dm&lt;/code&gt; bize memory map’i gösterir.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dm=&lt;/code&gt; Ascii art bars şeklinde memory map’i ekrana basar.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dm.&lt;/code&gt; mevcutta bulunan adresin memory map adını ve adresini ekrana basar.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dm- 0x25884689&lt;/code&gt; belirtilen adresteki memory mapi deallocate eder.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; dms&lt;/code&gt; memory snapshotlarını görüntüler.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dms &amp;lt;address&amp;gt;&lt;/code&gt; verilen adresin memory snapshot’ını alır.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dms-&amp;lt;id&amp;gt;&lt;/code&gt; ID’si girilen memory snapshot’ı siler.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmsA &amp;lt;id&amp;gt;&lt;/code&gt; ID’si girilen memory snapshot’ı uygular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Şimdi ise memory’de bulunan bir map’in dump’ını almaya çalışalım…&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;neden-böyle-bir-şeye-i̇htiyaç-var&quot;&gt;Neden Böyle Bir Şeye İhtiyaç Var?&lt;/h4&gt;

&lt;p&gt;Özellikle Malware Analizi yaparken Malware’ların bellekte kendi alanlarından farklı bölümlerde kritik uygulamalar çalıştırdığına şahit olmuşsunuzdur.&lt;/p&gt;

&lt;p&gt;Önemli bilgiler elde edebilmek adına Memory’den o çalışan programı dump etmeliyiz ki amacımıza ulaşalım. Bunu Radare2’de çok basit bir şekilde yapabiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dms 0x751236548625f251&lt;/code&gt; belirtilen adresin öncelikle bir snapshot’ını alıyoruz. Sonra ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmst virus.dmp 0x00007fe665484000&lt;/code&gt; komutu ile öncelikle diske kaydetmek istediğimiz dosya adını, sonra da snapshot’ını aldığımız memory map’in adresini veriyoruz. Daha sonra ise programımız ile aynı adreste virus.dmp dosyamızın oluştuğunu görüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/radare2-17.png&quot; alt=&quot;Radare2-17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VEE SON! Sizlere pratik bir şekilde kullanabileceğiniz hazır bilgileri sundum. Artık gerisi sizde…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/radare2-reverse-onsuz-olmaz/img/source.gif&quot; alt=&quot;Matrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bol analiz ve rivörsler :D&lt;/strong&gt;&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="radare2 kullanımı" /><category term="radare2 usage" /><category term="radare2 technical post" /><category term="radare2 reference" /><category term="radare2 command examples" /><summary type="html">Herkese selamlar arkadaşlar. Bu teknik makalemizde sizlere adını sıkça duyduğunuz Radare2’nin kısa ama faydalı, elinizin altında bir not niyetinde tutabileceğiniz bir tanıtımını yapacağım.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/radare2-reverse-onsuz-olmaz/img/cover.jpg" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/radare2-reverse-onsuz-olmaz/img/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HackIstanbul’19 Anısı</title><link href="https://fatihsensoy.com/HackIstanbul-Anisi/" rel="alternate" type="text/html" title="HackIstanbul’19 Anısı" /><published>2020-01-02T21:22:00+00:00</published><updated>2020-01-02T21:22:00+00:00</updated><id>https://fatihsensoy.com/HackIstanbul-Anisi</id><content type="html" xml:base="https://fatihsensoy.com/HackIstanbul-Anisi/">&lt;p&gt;Herkese selamlar;&lt;/p&gt;

&lt;p&gt;“&lt;strong&gt;Anılar&lt;/strong&gt;” bölümünün ilk yazısıyla karşınızdaydım. Bu anımda sizlerle HackISTANBUL 2019’u paylaşacağım.&lt;/p&gt;

&lt;p&gt;Batı Karadeniz Kalkınma Ajansı’nda aldığımız eğitimlerin sonucunda ilk kez katıldığımız HackISTANBUL 2019, bizim için çok güzel bir tecrübe oldu. 14 ülkeden 4012 kişinin katıldığı bu büyük CTF organizasyonunda biz de** Karaelmas Cyber Team** (Karaelmas Siber Güvenlik Takımı veya &lt;strong&gt;K4R43LM4S&lt;/strong&gt; veya başka bir nick ile karşılaşabilirsiniz) olarak yerlerimizi aldık.&lt;/p&gt;

&lt;p&gt;Takım arkadaşarım Sadi, Muhammed ve Bahattin hoca ile birlikte katıldığımız bu yarışmada, ilk başlarda ne yalan söylesem bilmiyorum ama ümidimiz yoktu. Çünkü hayatımız boyunca katıldığımız ilk CTF yarışması olacaktı ve uluslararası rakiplerimiz vardı. Ama bu durumunun sonradan nasıl tersine döndüğüne değineceğiz.&lt;/p&gt;

&lt;p&gt;Yarışmaya ben çoook uzaklardan, memleketimden katılmak durumunda kaldım. Aslında bu söylediğim sadece öne eleme için geçerliydi. Yarı finalde Ankara’dan katılım sağladım.&lt;/p&gt;

&lt;h2 id=&quot;yarışma-başlıyor&quot;&gt;Yarışma Başlıyor!&lt;/h2&gt;

&lt;p&gt;Makineler hazır, her şey yolunda, Parrot beklemedeydi :) Takımım ile uzaktan sesli iletişimi de sağlamıştık. Artık CTF’e dakikalar kalmıştı. Derken zamanı doldu, giriş bilgileri geldi ama sisteme giriş yapamıyorduk. Deniyorduk sürekli fakat olmuyordu. Sonra giriş yapmayı başardık fakat DEFAULT bir kullanıcı olarak girdik. Bazı şeyler ters gidiyordu. Sunucuya erişimde zorluklar çıkıyordu. Sebebini tahmin etmek zor değildi.&lt;/p&gt;

&lt;p&gt;Eğer uluslararası bir yarışma yapıyorsanız ve bunun da reklamlardan dolayı herkesin duymasını istiyorsanız kötü niyetli kişiler de elbette haberdar olacaktı. Ondan dolayı da DDoS saldırısı kaçınılmazdı. O gün yarışma yapılmadı maalesef. DDoS engellenemedi, sunucular ayağa kalkamadı. Fakat yetkin kişilere iş verilince ikinci gün sorun çözüldü ve portala erişmeye başladık.&lt;/p&gt;

&lt;p&gt;Önce basit sorulardan gitmeye başladık ki puanı daha fazla düşüp de bize bir lokmacık kalmasın diye. Asıl mevzu işe zor sorularda başlıyordu. Soruları çözmeye sürekli devam ediyorduk. Ama durmuyorduk. Her CTF yarışmacısında da bu olay söz konusudur. Sürenin nasıl geçtiğini anlamayız bile! Bizde de bu durum söz konusuydu.&lt;/p&gt;

&lt;p&gt;Kendimize geldiğimizde herhalde yarışmanın üzerinden bi 3-4 saat geçmiştir. Scoreboard’a baktığımızda ise içimizdeki ümitsizlik tamamen kırılmıştı. İlk 10’un içindeydik. Ve soruları çözmeye devam ediyorduk. Açıkçası kendimizden hiç beklemediğimiz bir performanstı bu. Ön eleme sorularına genel olarak değinecek olursak zor sorular vardı evet ama açıkçası bizi pek de zorlamadı. Tek dezavantajımız zamandı. Onu da ilk CTF yarışmamız olduğu için tam ayarlayamadık. Ön eleme sonucunda yarı finale katılmaya hak kazandık. Eğer yarı finalde de ilk 10’a girersek offline CTF’e, yani TeknoFest’e katılıyorduk.&lt;/p&gt;

&lt;p&gt;Bu başarının ardından daha da fazla çalışmaya başladık. Eksiklerimizi bir an önce kapatmamız gerekiyordu. Yanlış hatırlamıyorsam 1 hafta sonra da yarı final olacaktı. Ve zaman yine su gibi akıp geçti. Bir anda kendimizi yarı final aşamasında bulduk. Yarı finalde, ön elemede çıkan sorunlara nazaran hiç bir problem olmadı diyebiliriz. Tabi ki sorular ön elemeye göre daha zor olacaktı. Ama bu aşama bizim için ilk başlarda bayağı bir sıkıntılı geçti.&lt;/p&gt;

&lt;p&gt;Yarışmaya başlamanın üzerinden 2 saat geçmişti ve bizim takımın puanı 0’dı. Scorboard’a bile girememiştik. O anki ümitsizlik had safhadaydı. Tam moraller çökecek der iken hedef soruda bir zafiyet bulmam sonucunda shell’e ulaştım ve flagi aldım. İlk puanımızı aldık ve Scoreboard’a girişimizi yaptık. Hedeflediğim diğer soru ise bu soruya benzer olmasından dolayı onun da flagini bulmam pek zor olmadı. Ardı ardına 2 soru çözmemizin ardından bizim takım hücuma geçti diyebiliriz.&lt;/p&gt;

&lt;p&gt;Ardı ardına soruları çözüyor flagleri giriyor ve puanları alıyorduk. Takıldığımız, bilmediğimiz yerlerde birbirimiz ile paslaşıyorduk. Takım çalışması hepimize iyi geldi diyebilirim. Çünkü bir noktada takıldığınızda takım arkadaşınızın size çok yardımı dokunuyor.&lt;/p&gt;

&lt;p&gt;İlerleyen saatlerde ise yoğun uykusuzluk sonucunda takım arkadaşlarıma bildirerek biraz dinlenmeye başladım. En son bıraktığımızda felaket bir soru ile uğraşıyorlardı. Aranızda katılanlar varsa “MAZE” sorusunun ününü bilir. Bayağı bir ses getirmişti.&lt;/p&gt;

&lt;p&gt;Uyandığımda yaklaşık bir kaç saattir dinlendiğimi farkettim ve bilgisayarın başına tekrardan geçtim. Bir baktım ki MAZE sorusu yoğun uğraşlar sonucunda çözülmüş. Takım arkadaşlarım diye söylemiyorum Sadi ve Muhammed on numaralardır. Sorunun üstüne yoğunlaşırlar ise ve berrak bir kafa ile üzerine giderlerse o soru artık çözülmüş demektir :)&lt;/p&gt;

&lt;p&gt;Yarışmanın sonlarına doğru gelirken de her an yanımızda olan Muhammed Hocamıza da 12. sıralamada olduğumuzu ve biraz çaba ile ilk 10’a girebileceğimizi söylesek de yine karşımıza en büyük engel olan ZAMAN çıktı. Ne kadar tedbirli olursanız olun, etkili kullanmada sıkıntı yaşıyorsunuz. Soru sizi hiç olmayacak yerlerde döndürüp duruyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hackistanbul19-anisi/img/hackist19-1.jpg&quot; alt=&quot;HackIstanbul'19 Yarışma Sonuçları&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yarışma bitiminde ise ilk kez katıldığımız HackISTANBUL’19 CTF yarışmasını Karaelmas Siber Güvenlik Takımı olarak &lt;strong&gt;12. sırada&lt;/strong&gt; tamamladık. Bu başarı bizi sonraki CTF’lerde daha azimli ve çalışkan hale getirdi diyebiliriz. Bu başarıyı sağlayan başta Muhammed TEMLİ hocamıza olmak üzere tüm takım arkadaşlarımıza teşekkür ediyorum. Ve HackISTANBUL’19 anısını burada sonlandırıyorum. Katıldığımız diğer CTF’lerin anılarına da eklemeye devam edeceğimi bildirir, okuyarak zamanınızı ayırdığınız için teşekkür ederim :)&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="anı" /><category term="hackistanbul anısı" /><category term="hackistanbul 2019" /><summary type="html">Herkese selamlar;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/hackistanbul19-anisi/img/cover.png" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/hackistanbul19-anisi/img/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Matrix Ransomware Analizi (Giriş Seviye)</title><link href="https://fatihsensoy.com/Matrix-Ransomware-Analizi/" rel="alternate" type="text/html" title="Matrix Ransomware Analizi (Giriş Seviye)" /><published>2019-12-30T15:20:00+00:00</published><updated>2019-12-30T15:20:00+00:00</updated><id>https://fatihsensoy.com/Matrix-Ransomware-Analizi</id><content type="html" xml:base="https://fatihsensoy.com/Matrix-Ransomware-Analizi/">&lt;p&gt;Selamlar herkese. Matrix Ransomware analiz raporumu sizlere paylaşıyorum. Bu benim Malware Analistliği kariyerimde yazdığım ilk raporum ünvanını taşıyor. Diğerlerini de belirli aralıklarla sizlerle paylaşmayı düşünüyorum :)&lt;/p&gt;

&lt;p&gt;Matrix Ransomware, dünyada bir çok türevi bulunan bir fidye yazılımıdır. Bizim incelediğimiz türev başka hiçbir yerde incelenmemiştir. “.eman” uzantısında dosyaları kriptolamaktadır.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;SHA-256&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MD5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;242713ef2f372f0d39ca8f01bd09c9f99bcfe850e156621c023dd9e0bfb9bd95&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A93BD199D34D21CC9102600C6CE782CF&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;i̇lk-bakış&quot;&gt;İlk Bakış&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MatrixRansomware.exe&lt;/strong&gt; isimli dosyanın orijinal adı &lt;strong&gt;eman33.exe&lt;/strong&gt; olarak internet ortamında dolaşıyor. MatrixRansomware’ın farklı farklı türevleri mevcut ve sürekli gelişim halinde. Ben analizde anlaşılması adına ismini düzenledim. Şimdi ilk olarak bu ransomware’ın yeteneklerini görmek için gelin bir laboratuvar ortamımızda test edelim.&lt;/p&gt;

&lt;p&gt;Öncelikle MatrixRansomware.exe isimli dosyamızı kullanıcı yetkilerinde çalıştırıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-1.png&quot; alt=&quot;Matrix Ransomware İlk Bakış&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Çalıştırdığımızda masaüstümüzde dosyalar oluştuğunu ve iki adet komut satırı ekranı açıldığını görüyoruz. Laboratuvar ortamımız ağa bağlı.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-2.png&quot; alt=&quot;Matrix Ransomware İlk Açılış&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Görüldüğü üzere öne çıkan komut satırının en üstünde SHARESSCAN ibaresi yer alıyor. Yani şuan paylaşılan klasörleri geziyor. Ağımızdaki diğer bilgisayarlara ulaşmak için IP bloğumuzdan hareket ediyor. Diğer Command Line penceremizde ise bazı bilgilerin yer aldığını görüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-3.png&quot; alt=&quot;Matrix Ransomware İlk Tetikleme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Integrity seviyesini numaralandırdığını görüyoruz ve şuan da 3 seviyesinde. Yani program USER yetkilerinde çalışıyor. &lt;/p&gt;

&lt;p&gt;LDRIVES kısmına baktığımızda ise C: dizinini direk olarak hedef aldığını görüyoruz. Ve dosyalarımızı kriptolarken anlık olarak sistemimizin performansına göre kriptolama hızını gösteren bir ibare de mevcut.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-4.png&quot; alt=&quot;Matrix Ransomware Kullanıcı Yetkilerinde Oluşturulan Dosyalar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Masaüstüne kullanıcı yetkilerinde iken oluşturduğu dosyalar görselde mevcuttur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-5.png&quot; alt=&quot;Matrix Ransomware elog Dosya İçeriği&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;elog_0940325A9D85363B.txt&lt;/strong&gt; dosyasını açtığımızda ise logları görüyoruz. Ransomware’ımız kullanıcı yetkilerinde olduğu için dosyalara erişememiş ve bir şifreleme yapamamış.&lt;/p&gt;

&lt;p&gt;Şimdi ise Admin yetkilerinde malware’imizi çalıştıralım.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-6.png&quot; alt=&quot;Matrix Ransomware Admin Yetkileri&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yine aynı işlemleri yaptı ve komut ekranı kapandı. Kapanırken ise işlemin tamamlandığına dair bir bilgi verdi. Masaüstünde yine birkaç dosya oluşturdu ama bu sefer dosyalarımızı kriptolamıştı ve **#README_EMAN#.rtf **adında bir dosya oluşturmuştu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-7.png&quot; alt=&quot;Matrix Ransomware Admin Yetkilerinde Oluşturulan Dosyalar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dosyayı açtığımızda bize, dosyalarımızı nasıl kurtaracağımıza dair bir yönerge gösteriyordu. Saldırgan ile nasıl iletişime geçileceğinin bilgisi mevcuttu. Hatta güven sağlamak için saldırganlara yollayacağımız 3 adet kriptolanmış veriyi decrypt edip geri vereceklerini söylüyorlardı.&lt;/p&gt;

&lt;p&gt;İlk bakışımız bu şekilde sona erdi. Zararlı yazılımın ne yaptığı hakkında genel bir bilgi sahibi olduk. Şimdi ise bir sonraki adımımıza, yani STATİK ANALİZE geçelim.&lt;/p&gt;

&lt;h3 id=&quot;statik-analiz&quot;&gt;Statik Analiz&lt;/h3&gt;

&lt;p&gt;IDA ile statik analizimizi yapıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-8.png&quot; alt=&quot;IDA İlk Bakış&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Herhangi bir main fonksiyonunun olmadığını görüyoruz. Aslında var ama malware’ı geliştiren kişiler analizi zorlaştırmak için adını değiştirmiş veya malware’i packlemiş olabilirler. Pack detection toolları ile tarama yapıldığında da herhangi bir pack işleminin olmadığını gördük. Malware’ın &lt;strong&gt;3700&lt;/strong&gt;’den fazla fonksiyonu mevcut.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-9.png&quot; alt=&quot;Matrix Ransomware Hex Ve String&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Statik analize devam ettiğimizde ise Strings ve Hex Görüntüsü pencerelerine göz attığımızda ise bazı kritik bulgulara ulaşıyoruz. Bunlar indikatörlere ulaşmamızı sağlayacak.&lt;/p&gt;

&lt;p&gt;Bulunan Kritik Ve Önemli Bulgular&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Varolan işlemlerin diline bakarak kullanıcının sisteminin dilini öğrenmeye çalışıyor.&lt;/li&gt;
  &lt;li&gt;WSAStartup, bind, accept, connect gibi parametreler Soket Programlama’dan tanıdık geliyor. Yani bu malware bir uzak sunucu ile bağlantı kuruyor.&lt;/li&gt;
  &lt;li&gt;Listen, accept ve send parametleri de mevcut. Hem veri alıyor, hem de veri gönderimi yapıyor.&lt;/li&gt;
  &lt;li&gt;Basic seviyede Proxy-Authorization mekanizması kullanıyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Şimdi ise bu malware’ın neleri import ettiğine bakıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-10.png&quot; alt=&quot;Matrix Ransomware Importlar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kernel32&lt;/strong&gt; ve &lt;strong&gt;wsock32&lt;/strong&gt; gibi kritik kütüphaneleri kullanıyor. Wsock32 kütüphanesi import etmesinden de anlayabileceğimiz üzere bir sunucu ile iletişimde olduğu bulgularımızı doğrulamış olduk. Kütüphanelerden ise kullandığı fonksiyonlara göz atalım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DeleteFileW&lt;/strong&gt; fonksiyonunu dahil etmiş. Yani mesajda bize verdiği &lt;strong&gt;7 günlük&lt;/strong&gt; sürenin sonunda iletişime geçilmezse gerçekten de şifrelenmiş dosyaları siliyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CreateMutexW&lt;/strong&gt; fonksiyonu ile de Mutex mekanizması kullanıyor. Yani Mutex’i C dilinde yazıp çalıştırırsak, malware “Mutex var ise çalışma” prensibinden dolayı bir daha çalıştırırsak sistemi şifrelemeyecek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CryptGenRandom&lt;/strong&gt; fonksiyonu ile de bir arabelleği kriptografik baytlar ile dolduruyor.&lt;/p&gt;

&lt;h3 id=&quot;derinlere-i̇nelim&quot;&gt;Derinlere İnelim&lt;/h3&gt;

&lt;p&gt;IDA ile biraz daha ayrıntıya iniyoruz. &lt;strong&gt;FindFirstFileW&lt;/strong&gt; fonksiyonu ile belirli bir uzantıdaki dosyaları aradığını anlıyoruz. Biraz daha derin analiz yapıldığında ransomware’in kriptoladığı uzantılar aşağıdaki gibidir:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.cmd&lt;/li&gt;
  &lt;li&gt;.bat&lt;/li&gt;
  &lt;li&gt;.vbs&lt;/li&gt;
  &lt;li&gt;.ink&lt;/li&gt;
  &lt;li&gt;.rtf&lt;/li&gt;
  &lt;li&gt;.bmp&lt;/li&gt;
  &lt;li&gt;.tmp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;32-bit ve 64-bit sistemler için ayrı ayrı işlemler yapıyor.&lt;/p&gt;

&lt;p&gt;Disassembly kodlarında** log.txt**’nin de oluşturulduğunu görüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nw.exe&lt;/strong&gt; adlı programın –n parametresi ile bir işlem yapıyor ve nw.exe ağ ve Javascript kütüphaneleri içeren bir program olarak biliniyor. Genelde adware yazılımlar için kullanılıyor.&lt;/p&gt;

&lt;p&gt;“%d.%d.%d.%d” ile aynı ağda bulunan diğer sistemleri tarayarak IP adreslerini CMD ekranında kullanıcıya gösteriyor.&lt;/p&gt;

&lt;p&gt;80, 443, 21 gibi portlar da zararlıya tanımlanmış.&lt;/p&gt;

&lt;p&gt;Malware, bulaşma zamanlarını hesaplayarak 7 günlük silme sürecini başlatıyor. Bilgisayarın ve mevcut kullanıcının adını da tanımlama yapmak amacıyla alıyor. flcCipherRSA ibaresinden dosyaların RSA ile kriptolandığını anlıyoruz.&lt;/p&gt;

&lt;p&gt;Ayrıca bir URL’e HTTP verisi gönderildiğini tespit ettim. HTTP başlıklarını ayarlıyor. “&lt;strong&gt;set-cookie, Content-Lenght, Content-Type&lt;/strong&gt;” gibi standart HTTP Head bilgilerini de yolluyor. Cookie set etmesinden bir kullanıcı tanımlama mekanizması yaptığı ihtimali güçleniyor.&lt;/p&gt;

&lt;p&gt;Komuta kontrol sunucusuna (URL’e) yolladığı parametreler ise dikkat çekici:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/addrecord.php?apikey=&lt;/li&gt;
  &lt;li&gt;&amp;amp;compuser=&lt;/li&gt;
  &lt;li&gt;&amp;amp;sid=&lt;/li&gt;
  &lt;li&gt;&amp;amp;phase=&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ardı ardına birleştirme operatörünü kullanarak (&amp;amp;) bir istek gönderiyor. Burada da her kullanıcıyı tanımlamak için bir mekanizma oluşturduğu ihtimalini kanıtlamış oluyoruz.&lt;/p&gt;

&lt;p&gt;Ayrıca user-agent olarak “&lt;strong&gt;Mozilla/4.0 (compatible; Synapse)&lt;/strong&gt;” ayarlıyor.&lt;/p&gt;

&lt;h3 id=&quot;cff-explorer&quot;&gt;CFF Explorer&lt;/h3&gt;

&lt;p&gt;Daha iyi analizle yapmak için CFF Explorer’da da analiz ediyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-11.png&quot; alt=&quot;CFF Explorer İlk Bakış&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Section Headers’lara baktığımızda standart MZ başlığı yerine &lt;strong&gt;MZP&lt;/strong&gt; başlığını görüyoruz. Yani bu ransomware &lt;strong&gt;Pascal&lt;/strong&gt; ile yazılmış!&lt;/p&gt;

&lt;p&gt;Analizin geçen kısımlarında ise Borland Delphi 3.0 IDE’sini kullandığını da tespit etmiştik.&lt;/p&gt;

&lt;p&gt;Import Directory’ye geldiğimizde ise malware’ın etkisini ciddi derecede görebiliyoruz. Import ettiği dll’ler ve fonksiyonlarında kritik seviyede bulunanlar şu şekilde:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GetSystemInfo&lt;/li&gt;
  &lt;li&gt;GetProcAddress&lt;/li&gt;
  &lt;li&gt;CreateThread&lt;/li&gt;
  &lt;li&gt;CreateMutexW&lt;/li&gt;
  &lt;li&gt;GetVolumeInformationW&lt;/li&gt;
  &lt;li&gt;GetDiskFreeSpace&lt;/li&gt;
  &lt;li&gt;DeleteFileW&lt;/li&gt;
  &lt;li&gt;gethostname&lt;/li&gt;
  &lt;li&gt;gethostbyname&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yukarıdaki fonksiyonlara baktığımızda;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sistemin bilgilerini alabildiği,&lt;/li&gt;
  &lt;li&gt;bir işlemin adresini alabildiği,&lt;/li&gt;
  &lt;li&gt;bir iş parçacığı oluşturabildiği,&lt;/li&gt;
  &lt;li&gt;bir Mutex nesnesi oluşturabildiği,&lt;/li&gt;
  &lt;li&gt;Dosya sistemi ve hacmine erişebildiği,&lt;/li&gt;
  &lt;li&gt;Boş alana erişebildiği,&lt;/li&gt;
  &lt;li&gt;Ve en kritiği olan DOSYALARI SİLEBİLDİĞİ gözlemlenmiştir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-12.png&quot; alt=&quot;Matrix Ransomware Resource&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dosyanın içindeki kaynaklarda ise iki kısmın olduğu tespit edilmiştir. Strings Tables ve RCData. Strings Tables’da ayların isimleri vs. olduğu gözlemlenmiştir. RCData kısmında ise farklı farklı kaynaklar olduğu görülmektedir.&lt;/p&gt;

&lt;p&gt;Fakat erişilmeye çalışıldığında bozuk bir ASCII çıktısı bizi karşılamaktadır. Buradan yapılan çıkarımla &lt;strong&gt;RCData&lt;/strong&gt; kaynağının içinde çok önemli bilgilerin olduğu ve okunamaması için de özel bir şifreleme türü ile şifrelendiği ortaya çıkmaktadır.&lt;/p&gt;

&lt;h3 id=&quot;dinamik-analize-geçelim&quot;&gt;Dinamik Analize Geçelim&lt;/h3&gt;

&lt;p&gt;Statik analizde bir çok önemli veriyi ele geçirmeyi başardık. Şimdi ise bize kritik bilgileri verecek olan, bir Malware Analizinin olmazsa olmazı Dinamik Analize geçiyoruz. Şimdi bulduğumuz kritik fonksiyonlara breakpoint koyuyoruz ve analiz etmeye başlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-13.png&quot; alt=&quot;Matrix Ransomware x64dbg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hepsine breakpoint koyduk. GetVolumeInformation fonksiyonuna geldiğinde registerlarda “C:\” ifadesini görüyoruz. Yani direk olarak C dizinini hedef almış. Ama genel olarak Memory Map’e de baktığımız zaman bellekte de analizi zorlaştırmak için bir şifreleme yaptığı ortaya çıkıyor.&lt;/p&gt;

&lt;p&gt;DeleteFileW fonksiyonuna gelince ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;C:\Program Files\Windows Mail\wabmig.exe&quot;&lt;/code&gt; dosyasına ulaştığını görüyoruz. Windows Mail’i de hedef alıyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-14.png&quot; alt=&quot;Matrix Ransomware Command Line Çıktıları&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu arada masaüstünde iki tane .exe ve bir adet .bat dosyası oluşturduğunu gözlemiyoruz. “.bat” dosyasına baktığımızda ise bazı komutların yer aldığını görüyoruz. Username bilgisine ulaştığını, ve sahipliğini üzerine aldığını, ve başka dizinlere atladığını görüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FOR /F &quot;UseBackQ Tokens=3,6 delims=: &quot; %%I IN (&quot;umsBf6bj.exe -accepteula %FN% -nobanner&quot;) DO (umsBf6bj.exe -accepteula -c %%J -y -p %%I -nobanner)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda kod diziminde ise masaüstünde oluşturduğu .exe dosyasını çalıştırıp parameterler giriyor. EULA’yı da kabul ettiriyor her seferinde. Sysinternals Handle Viewer programının kullanımı otomatikleştirmiş.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;umsBf6bj.exe&lt;/strong&gt; dosyasının UPX ile packlendiğini de ortaya çıkarttık. Şimdi unpack yapıp analiz edelim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/matrix-ransomware-analizi/img/matrix-15.png&quot; alt=&quot;Matrix Ransomware Gizli Dosya&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Görüldüğü üzere Multiple koruma yöntemi uygulanmış. Unpack işlemimizi başarıyla gerçekleştirdik. Artık tüm fonksiyonları görebiliriz.&lt;/p&gt;

&lt;p&gt;umsBf6bj.exe uygulaması, tarihleri alam ve ayarlama, kayıt defteri verilerini okuma, oluşturma ve silme işlemlerini, dosya oluşturma, silme, kriptolama işlemlerini, pointerları encrypt ve decryptleme işlemlerini, loglama işlemlerini yerine getiriyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NWcxwNQL.exe&lt;/strong&gt; dosyayı ise MatrixRansomware.exe’nin kopyası. Fakat aynı ağ üzerinde bulunan diğer sistemleri de tarıyor. Eğer paylaşılan dosya bulursa onu da kriptoluyor.&lt;/p&gt;

&lt;p&gt;umsBf6bj.exe dosyasının Resource’larına baktığımızda Sysinternals Handle Viewer programını görüyoruz. Dosyalara erişebilmek ve sahibini görüntülemek için Windows’un kendi uygulaması kullanılmış.&lt;/p&gt;

&lt;p&gt;Wireshark ile detaylı ağ analizi yaptığımızda ise &lt;strong&gt;eman.mygoodsday[.]org&lt;/strong&gt; komuta kontrol sunucusu bulunmuştur. Fakat artık böyle bir komuta kontrol sunucusunun mevcut olmadığı tespit edilmiştir.&lt;/p&gt;

&lt;h3 id=&quot;sonsöz&quot;&gt;Sonsöz&lt;/h3&gt;

&lt;p&gt;MatrixRansomware’ı olabildiğince analiz etmeye çalıştım. Resource’larda ve memory’de şifreleme kullanıldığı için bazı önemli verilere ulaşamadım. Bu analiz raporu ilerleyen günlerde güncellenecektir.&lt;/p&gt;</content><author><name>Fatih ŞENSOY</name><email>iletisim@fatihsensoy.com</email></author><category term="malware" /><category term="malware analysis" /><category term="matrix ransomware" /><summary type="html">Selamlar herkese. Matrix Ransomware analiz raporumu sizlere paylaşıyorum. Bu benim Malware Analistliği kariyerimde yazdığım ilk raporum ünvanını taşıyor. Diğerlerini de belirli aralıklarla sizlerle paylaşmayı düşünüyorum :)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fatihsensoy.com/assets/img/matrix-ransomware-analizi/img/cover.png" /><media:content medium="image" url="https://fatihsensoy.com/assets/img/matrix-ransomware-analizi/img/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>